;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Command-line parsing library

This module is an optparse-inspired command-line parsing library that:

    - handles both optional and positional arguments
    - produces highly informative usage messages
    - supports parsers that dispatch to sub-parsers

The following is a simple usage example that sums integers from the
command-line and writes the result to a file::

    parser = argparse.ArgumentParser(
        description='sum the integers at the command line')
    parser.add_argument(
        'integers', metavar='int', nargs='+', type=int,
        help='an integer to be summed')
    parser.add_argument(
        '--log', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the sum should be written')
    args = parser.parse_args()
    args.log.write('%s' % sum(args.integers))
    args.log.close()

The module contains the following public classes:

    - ArgumentParser -- The main entry point for command-line parsing. As the
        example above shows, the add_argument() method is used to populate
        the parser with actions for optional and positional arguments. Then
        the parse_args() method is invoked to convert the args at the
        command-line into an object with attributes.

    - ArgumentError -- The exception raised by ArgumentParser objects when
        there are errors with the parser's actions. Errors raised while
        parsing the command-line are caught by ArgumentParser and emitted
        as command-line messages.

    - FileType -- A factory for defining types of files to be created. As the
        example above shows, instances of FileType are typically passed as
        the type= argument of add_argument() calls.

    - Action -- The base class for parser actions. Typically actions are
        selected by passing strings like 'store_true' or 'append_const' to
        the action= argument of add_argument(). However, for greater
        customization of ArgumentParser actions, subclasses of Action may
        be defined and passed as the action= argument.

    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,
        ArgumentDefaultsHelpFormatter -- Formatter classes which
        may be passed as the formatter_class= argument to the
        ArgumentParser constructor. HelpFormatter is the default,
        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser
        not to change the formatting for help text, and
        ArgumentDefaultsHelpFormatter adds information about argument defaults
        to the help.

All other classes in this module are considered implementation details.
(Also note that HelpFormatter and RawDescriptionHelpFormatter are only
considered public as object names -- the API of the formatter objects is
still considered an implementation detail.)
\"\"\"" code nil nil [58 2875])
            ("__version__" variable nil nil [2877 2896])
            ("__all__" variable nil nil [2897 3248])
            ("collections" include nil nil [3251 3285])
            ("copy" include nil nil [3286 3306])
            ("os" include nil nil [3307 3323])
            ("re" include nil nil [3324 3340])
            ("sys" include nil nil [3341 3359])
            ("textwrap" include nil nil [3360 3388])
            ("gettext" include nil nil [3390 3422])
            ("_callable" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [3439 3442]))              ) nil [3425 3510])
            ("SUPPRESS" variable nil nil [3512 3537])
            ("OPTIONAL" variable nil nil [3539 3553])
            ("ZERO_OR_MORE" variable nil nil [3554 3572])
            ("ONE_OR_MORE" variable nil nil [3573 3590])
            ("PARSER" variable nil nil [3591 3606])
            ("REMAINDER" variable nil nil [3607 3624])
            ("_UNRECOGNIZED_ARGS_ATTR" variable nil nil [3625 3671])
            ("_AttributeHolder" type
               (:documentation "Abstract base class that provides __repr__.

    The __repr__ method returns a string in the format::
        ClassName(attr=name, attr=name, ...)
    The attributes are determined either by a class-level attribute,
    '_kwarg_names', or by inspecting the instance __dict__.
    "
                :superclasses ("object")
                :members 
                  ( ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4111 4115]))                          )
                        (reparse-symbol indented_block_body) [4098 4427])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4448 4452]))                          )
                        (reparse-symbol indented_block_body) [4432 4500])
                    ("_get_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4519 4523]))                          )
                        (reparse-symbol indented_block_body) [4505 4544]))                  
                :type "class")
                nil [3770 4544])
            ("_ensure_value" function (:arguments 
              ( ("namespace" variable nil (reparse-symbol function_parameters) [4564 4573])
                ("name" variable nil (reparse-symbol function_parameters) [4575 4579])
                ("value" variable nil (reparse-symbol function_parameters) [4581 4586]))              ) nil [4546 4712])
            ("HelpFormatter" type
               (:documentation "Formatter for generating usage messages and argument help strings.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [5222 5402])
                            ("self" variable nil (reparse-symbol indented_block_body) [5411 5428])
                            ("self" variable nil (reparse-symbol indented_block_body) [5437 5478])
                            ("self" variable nil (reparse-symbol indented_block_body) [5487 5530])
                            ("self" variable nil (reparse-symbol indented_block_body) [5539 5664])
                            ("self" variable nil (reparse-symbol indented_block_body) [5673 5692])
                            ("self" variable nil (reparse-symbol indented_block_body) [5702 5726])
                            ("self" variable nil (reparse-symbol indented_block_body) [5735 5750])
                            ("self" variable nil (reparse-symbol indented_block_body) [5759 5786])
                            ("self" variable nil (reparse-symbol indented_block_body) [5796 5842])
                            ("self" variable nil (reparse-symbol indented_block_body) [5851 5893])
                            ("self" variable nil (reparse-symbol indented_block_body) [5903 5949])
                            ("self" variable nil (reparse-symbol indented_block_body) [5958 6008]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5042 5046])
                            ("prog" variable nil (reparse-symbol function_parameters) [5065 5069])
                            ("indent_increment" variable nil (reparse-symbol function_parameters) [5088 5104])
                            ("max_help_position" variable nil (reparse-symbol function_parameters) [5125 5142])
                            ("width" variable nil (reparse-symbol function_parameters) [5164 5169]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5029 6009])
                    ("_indent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6140 6144]))                          )
                        (reparse-symbol indented_block_body) [6128 6227])
                    ("_dedent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6244 6248]))                          )
                        (reparse-symbol indented_block_body) [6232 6401])
                    ("_Section" type
                       (:superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [6504 6530])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6543 6563])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6576 6598])
                                    ("self" variable nil (reparse-symbol indented_block_body) [6611 6626]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6452 6456])
                                    ("formatter" variable nil (reparse-symbol function_parameters) [6458 6467])
                                    ("parent" variable nil (reparse-symbol function_parameters) [6469 6475])
                                    ("heading" variable nil (reparse-symbol function_parameters) [6477 6484]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [6439 6627])
                            ("format_help" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [6652 6656]))                                  )
                                (reparse-symbol indented_block_body) [6636 7614]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [6406 7614])
                    ("_add_item" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7633 7637])
                            ("func" variable nil (reparse-symbol function_parameters) [7639 7643])
                            ("args" variable nil (reparse-symbol function_parameters) [7645 7649]))                          )
                        (reparse-symbol indented_block_body) [7619 7709])
                    ("start_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7825 7829])
                            ("heading" variable nil (reparse-symbol function_parameters) [7831 7838]))                          )
                        (reparse-symbol indented_block_body) [7807 8022])
                    ("end_section" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8043 8047]))                          )
                        (reparse-symbol indented_block_body) [8027 8134])
                    ("add_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8152 8156])
                            ("text" variable nil (reparse-symbol function_parameters) [8158 8162]))                          )
                        (reparse-symbol indented_block_body) [8139 8273])
                    ("add_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8292 8296])
                            ("usage" variable nil (reparse-symbol function_parameters) [8298 8303])
                            ("actions" variable nil (reparse-symbol function_parameters) [8305 8312])
                            ("groups" variable nil (reparse-symbol function_parameters) [8314 8320])
                            ("prefix" variable nil (reparse-symbol function_parameters) [8322 8328]))                          )
                        (reparse-symbol indented_block_body) [8278 8473])
                    ("add_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8495 8499])
                            ("action" variable nil (reparse-symbol function_parameters) [8501 8507]))                          )
                        (reparse-symbol indented_block_body) [8478 9232])
                    ("add_arguments" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9255 9259])
                            ("actions" variable nil (reparse-symbol function_parameters) [9261 9268]))                          )
                        (reparse-symbol indented_block_body) [9237 9340])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9451 9455]))                          )
                        (reparse-symbol indented_block_body) [9435 9648])
                    ("_join_parts" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9669 9673])
                            ("part_strings" variable nil (reparse-symbol function_parameters) [9675 9687]))                          )
                        (reparse-symbol indented_block_body) [9653 9827])
                    ("_format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9850 9854])
                            ("usage" variable nil (reparse-symbol function_parameters) [9856 9861])
                            ("actions" variable nil (reparse-symbol function_parameters) [9863 9870])
                            ("groups" variable nil (reparse-symbol function_parameters) [9872 9878])
                            ("prefix" variable nil (reparse-symbol function_parameters) [9880 9886]))                          )
                        (reparse-symbol indented_block_body) [9832 13674])
                    ("_format_actions_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13705 13709])
                            ("actions" variable nil (reparse-symbol function_parameters) [13711 13718])
                            ("groups" variable nil (reparse-symbol function_parameters) [13720 13726]))                          )
                        (reparse-symbol indented_block_body) [13679 17329])
                    ("_format_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17351 17355])
                            ("text" variable nil (reparse-symbol function_parameters) [17357 17361]))                          )
                        (reparse-symbol indented_block_body) [17334 17617])
                    ("_format_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17641 17645])
                            ("action" variable nil (reparse-symbol function_parameters) [17647 17653]))                          )
                        (reparse-symbol indented_block_body) [17622 19554])
                    ("_format_action_invocation" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19589 19593])
                            ("action" variable nil (reparse-symbol function_parameters) [19595 19601]))                          )
                        (reparse-symbol indented_block_body) [19559 20350])
                    ("_metavar_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20378 20382])
                            ("action" variable nil (reparse-symbol function_parameters) [20384 20390])
                            ("default_metavar" variable nil (reparse-symbol function_parameters) [20392 20407]))                          )
                        (reparse-symbol indented_block_body) [20355 20890])
                    ("_format_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20912 20916])
                            ("action" variable nil (reparse-symbol function_parameters) [20918 20924])
                            ("default_metavar" variable nil (reparse-symbol function_parameters) [20926 20941]))                          )
                        (reparse-symbol indented_block_body) [20895 21678])
                    ("_expand_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21700 21704])
                            ("action" variable nil (reparse-symbol function_parameters) [21706 21712]))                          )
                        (reparse-symbol indented_block_body) [21683 22230])
                    ("_iter_indented_subactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22265 22269])
                            ("action" variable nil (reparse-symbol function_parameters) [22271 22277]))                          )
                        (reparse-symbol indented_block_body) [22235 22540])
                    ("_split_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22562 22566])
                            ("text" variable nil (reparse-symbol function_parameters) [22568 22572])
                            ("width" variable nil (reparse-symbol function_parameters) [22574 22579]))                          )
                        (reparse-symbol indented_block_body) [22545 22688])
                    ("_fill_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22708 22712])
                            ("text" variable nil (reparse-symbol function_parameters) [22714 22718])
                            ("width" variable nil (reparse-symbol function_parameters) [22720 22725])
                            ("indent" variable nil (reparse-symbol function_parameters) [22727 22733]))                          )
                        (reparse-symbol indented_block_body) [22693 22934])
                    ("_get_help_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22960 22964])
                            ("action" variable nil (reparse-symbol function_parameters) [22966 22972]))                          )
                        (reparse-symbol indented_block_body) [22939 23002]))                  
                :type "class")
                nil [4769 23002])
            ("RawDescriptionHelpFormatter" type
               (:documentation "Help message formatter which retains any formatting in descriptions.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("_fill_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23302 23306])
                            ("text" variable nil (reparse-symbol function_parameters) [23308 23312])
                            ("width" variable nil (reparse-symbol function_parameters) [23314 23319])
                            ("indent" variable nil (reparse-symbol function_parameters) [23321 23327]))                          )
                        (reparse-symbol indented_block_body) [23287 23404]))                  
                :type "class")
                nil [23004 23404])
            ("RawTextHelpFormatter" type
               (:documentation "Help message formatter which retains formatting of all help text.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("RawDescriptionHelpFormatter")
                :members 
                  ( ("_split_lines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23710 23714])
                            ("text" variable nil (reparse-symbol function_parameters) [23716 23720])
                            ("width" variable nil (reparse-symbol function_parameters) [23722 23727]))                          )
                        (reparse-symbol indented_block_body) [23693 23763]))                  
                :type "class")
                nil [23406 23763])
            ("ArgumentDefaultsHelpFormatter" type
               (:documentation "Help message formatter which adds default values to argument help.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    "
                :superclasses ("HelpFormatter")
                :members 
                  ( ("_get_help_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24069 24073])
                            ("action" variable nil (reparse-symbol function_parameters) [24075 24081]))                          )
                        (reparse-symbol indented_block_body) [24048 24414]))                  
                :type "class")
                nil [23765 24414])
            ("_get_action_name" function (:arguments 
              ( ("argument" variable nil (reparse-symbol function_parameters) [24510 24518]))              ) nil [24489 24840])
            ("ArgumentError" type
               (:documentation "An error from creating or using an argument (optional or positional).

    The string value of this exception is the message, augmented with
    information about the argument that caused it.
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [25133 25180])
                            ("self" variable nil (reparse-symbol indented_block_body) [25189 25211]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25099 25103])
                            ("argument" variable nil (reparse-symbol function_parameters) [25105 25113])
                            ("message" variable nil (reparse-symbol function_parameters) [25115 25122]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25086 25212])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25229 25233]))                          )
                        (reparse-symbol indented_block_body) [25217 25501]))                  
                :type "class")
                nil [24842 25501])
            ("ArgumentTypeError" type
               (:documentation "An error from trying to convert a command line string to a type."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [25618 25622]))                  
                :type "class")
                nil [25503 25623])
            ("Action" type
               (:documentation "Information about how to convert command line strings to Python objects.

    Action objects are used by an ArgumentParser to represent the information
    needed to parse a single argument from one or more strings from the
    command line. The keyword arguments to the Action constructor are also
    all attributes of Action instances.

    Keyword Arguments:

        - option_strings -- A list of command-line option strings which
            should be associated with this action.

        - dest -- The name of the attribute to hold the created object(s)

        - nargs -- The number of command-line arguments that should be
            consumed. By default, one argument will be consumed and a single
            value will be produced.  Other values include:
                - N (an integer) consumes N arguments (and produces a list)
                - '?' consumes zero or one arguments
                - '*' consumes zero or more arguments (and produces a list)
                - '+' consumes one or more arguments (and produces a list)
            Note that the difference between the default and nargs=1 is that
            with the default, a single value will be produced, while with
            nargs=1, a list containing a single value will be produced.

        - const -- The value to be produced if the option is specified and the
            option uses an action that takes no values.

        - default -- The value to be produced if the option is not specified.

        - type -- A callable that accepts a single string argument, and
            returns the converted value.  The standard Python types str, int,
            float, and complex are useful examples of such callables.  If None,
            str is used.

        - choices -- A container of values that should be allowed. If not None,
            after a command-line argument has been converted to the appropriate
            type, an exception will be raised if it is not a member of this
            collection.

        - required -- True if the action must always be specified at the
            command line. This is only meaningful for optional command-line
            arguments.

        - help -- The help string describing the argument.

        - metavar -- The name to be used for the option's argument with the
            help string. If None, the 'dest' value will be used as the name.
    "
                :superclasses ("_AttributeHolder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [28445 28481])
                            ("self" variable nil (reparse-symbol indented_block_body) [28490 28506])
                            ("self" variable nil (reparse-symbol indented_block_body) [28515 28533])
                            ("self" variable nil (reparse-symbol indented_block_body) [28542 28560])
                            ("self" variable nil (reparse-symbol indented_block_body) [28569 28591])
                            ("self" variable nil (reparse-symbol indented_block_body) [28600 28616])
                            ("self" variable nil (reparse-symbol indented_block_body) [28625 28647])
                            ("self" variable nil (reparse-symbol indented_block_body) [28656 28680])
                            ("self" variable nil (reparse-symbol indented_block_body) [28689 28705])
                            ("self" variable nil (reparse-symbol indented_block_body) [28714 28736]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28134 28138])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [28157 28171])
                            ("dest" variable nil (reparse-symbol function_parameters) [28190 28194])
                            ("nargs" variable nil (reparse-symbol function_parameters) [28213 28218])
                            ("const" variable nil (reparse-symbol function_parameters) [28242 28247])
                            ("default" variable nil (reparse-symbol function_parameters) [28271 28278])
                            ("type" variable nil (reparse-symbol function_parameters) [28302 28306])
                            ("choices" variable nil (reparse-symbol function_parameters) [28330 28337])
                            ("required" variable nil (reparse-symbol function_parameters) [28361 28369])
                            ("help" variable nil (reparse-symbol function_parameters) [28394 28398])
                            ("metavar" variable nil (reparse-symbol function_parameters) [28422 28429]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28121 28737])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28758 28762]))                          )
                        (reparse-symbol indented_block_body) [28742 29057])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29075 29079])
                            ("parser" variable nil (reparse-symbol function_parameters) [29081 29087])
                            ("namespace" variable nil (reparse-symbol function_parameters) [29089 29098])
                            ("values" variable nil (reparse-symbol function_parameters) [29100 29106])
                            ("option_string" variable nil (reparse-symbol function_parameters) [29108 29121]))                          )
                        (reparse-symbol indented_block_body) [29062 29193]))                  
                :type "class")
                nil [25677 29193])
            ("_StoreAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [29552 29796])
                            ("if" code nil (reparse-symbol indented_block_body) [29804 29924])
                            ("super" code nil (reparse-symbol indented_block_body) [29932 30247]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29241 29245])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [29264 29278])
                            ("dest" variable nil (reparse-symbol function_parameters) [29297 29301])
                            ("nargs" variable nil (reparse-symbol function_parameters) [29320 29325])
                            ("const" variable nil (reparse-symbol function_parameters) [29349 29354])
                            ("default" variable nil (reparse-symbol function_parameters) [29378 29385])
                            ("type" variable nil (reparse-symbol function_parameters) [29409 29413])
                            ("choices" variable nil (reparse-symbol function_parameters) [29437 29444])
                            ("required" variable nil (reparse-symbol function_parameters) [29468 29476])
                            ("help" variable nil (reparse-symbol function_parameters) [29501 29505])
                            ("metavar" variable nil (reparse-symbol function_parameters) [29529 29536]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29228 30248])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30266 30270])
                            ("parser" variable nil (reparse-symbol function_parameters) [30272 30278])
                            ("namespace" variable nil (reparse-symbol function_parameters) [30280 30289])
                            ("values" variable nil (reparse-symbol function_parameters) [30291 30297])
                            ("option_string" variable nil (reparse-symbol function_parameters) [30299 30312]))                          )
                        (reparse-symbol indented_block_body) [30253 30366]))                  
                :type "class")
                nil [29195 30366])
            ("_StoreConstAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [30637 30872]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30419 30423])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [30442 30456])
                            ("dest" variable nil (reparse-symbol function_parameters) [30475 30479])
                            ("const" variable nil (reparse-symbol function_parameters) [30498 30503])
                            ("default" variable nil (reparse-symbol function_parameters) [30522 30529])
                            ("required" variable nil (reparse-symbol function_parameters) [30553 30561])
                            ("help" variable nil (reparse-symbol function_parameters) [30586 30590])
                            ("metavar" variable nil (reparse-symbol function_parameters) [30614 30621]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30406 30873])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30891 30895])
                            ("parser" variable nil (reparse-symbol function_parameters) [30897 30903])
                            ("namespace" variable nil (reparse-symbol function_parameters) [30905 30914])
                            ("values" variable nil (reparse-symbol function_parameters) [30916 30922])
                            ("option_string" variable nil (reparse-symbol function_parameters) [30924 30937]))                          )
                        (reparse-symbol indented_block_body) [30878 30995]))                  
                :type "class")
                nil [30368 30995])
            ("_StoreTrueAction" type
               (:superclasses ("_StoreConstAction")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [31222 31434]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31058 31062])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [31081 31095])
                            ("dest" variable nil (reparse-symbol function_parameters) [31114 31118])
                            ("default" variable nil (reparse-symbol function_parameters) [31137 31144])
                            ("required" variable nil (reparse-symbol function_parameters) [31169 31177])
                            ("help" variable nil (reparse-symbol function_parameters) [31202 31206]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31045 31435]))                  
                :type "class")
                nil [30997 31435])
            ("_StoreFalseAction" type
               (:superclasses ("_StoreConstAction")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [31662 31876]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31499 31503])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [31522 31536])
                            ("dest" variable nil (reparse-symbol function_parameters) [31555 31559])
                            ("default" variable nil (reparse-symbol function_parameters) [31578 31585])
                            ("required" variable nil (reparse-symbol function_parameters) [31609 31617])
                            ("help" variable nil (reparse-symbol function_parameters) [31642 31646]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31486 31877]))                  
                :type "class")
                nil [31437 31877])
            ("_AppendAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [32237 32488])
                            ("if" code nil (reparse-symbol indented_block_body) [32496 32616])
                            ("super" code nil (reparse-symbol indented_block_body) [32624 32940]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31926 31930])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [31949 31963])
                            ("dest" variable nil (reparse-symbol function_parameters) [31982 31986])
                            ("nargs" variable nil (reparse-symbol function_parameters) [32005 32010])
                            ("const" variable nil (reparse-symbol function_parameters) [32034 32039])
                            ("default" variable nil (reparse-symbol function_parameters) [32063 32070])
                            ("type" variable nil (reparse-symbol function_parameters) [32094 32098])
                            ("choices" variable nil (reparse-symbol function_parameters) [32122 32129])
                            ("required" variable nil (reparse-symbol function_parameters) [32153 32161])
                            ("help" variable nil (reparse-symbol function_parameters) [32186 32190])
                            ("metavar" variable nil (reparse-symbol function_parameters) [32214 32221]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31913 32941])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32959 32963])
                            ("parser" variable nil (reparse-symbol function_parameters) [32965 32971])
                            ("namespace" variable nil (reparse-symbol function_parameters) [32973 32982])
                            ("values" variable nil (reparse-symbol function_parameters) [32984 32990])
                            ("option_string" variable nil (reparse-symbol function_parameters) [32992 33005]))                          )
                        (reparse-symbol indented_block_body) [32946 33155]))                  
                :type "class")
                nil [31879 33155])
            ("_AppendConstAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [33427 33692]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33209 33213])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [33232 33246])
                            ("dest" variable nil (reparse-symbol function_parameters) [33265 33269])
                            ("const" variable nil (reparse-symbol function_parameters) [33288 33293])
                            ("default" variable nil (reparse-symbol function_parameters) [33312 33319])
                            ("required" variable nil (reparse-symbol function_parameters) [33343 33351])
                            ("help" variable nil (reparse-symbol function_parameters) [33376 33380])
                            ("metavar" variable nil (reparse-symbol function_parameters) [33404 33411]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33196 33693])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33711 33715])
                            ("parser" variable nil (reparse-symbol function_parameters) [33717 33723])
                            ("namespace" variable nil (reparse-symbol function_parameters) [33725 33734])
                            ("values" variable nil (reparse-symbol function_parameters) [33736 33742])
                            ("option_string" variable nil (reparse-symbol function_parameters) [33744 33757]))                          )
                        (reparse-symbol indented_block_body) [33698 33911]))                  
                :type "class")
                nil [33157 33911])
            ("_CountAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [34122 34327]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33959 33963])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [33982 33996])
                            ("dest" variable nil (reparse-symbol function_parameters) [34015 34019])
                            ("default" variable nil (reparse-symbol function_parameters) [34038 34045])
                            ("required" variable nil (reparse-symbol function_parameters) [34069 34077])
                            ("help" variable nil (reparse-symbol function_parameters) [34102 34106]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33946 34328])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34346 34350])
                            ("parser" variable nil (reparse-symbol function_parameters) [34352 34358])
                            ("namespace" variable nil (reparse-symbol function_parameters) [34360 34369])
                            ("values" variable nil (reparse-symbol function_parameters) [34371 34377])
                            ("option_string" variable nil (reparse-symbol function_parameters) [34379 34392]))                          )
                        (reparse-symbol indented_block_body) [34333 34512]))                  
                :type "class")
                nil [33913 34512])
            ("_HelpAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [34702 34875]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34559 34563])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [34582 34596])
                            ("dest" variable nil (reparse-symbol function_parameters) [34615 34619])
                            ("default" variable nil (reparse-symbol function_parameters) [34647 34654])
                            ("help" variable nil (reparse-symbol function_parameters) [34682 34686]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [34546 34876])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34894 34898])
                            ("parser" variable nil (reparse-symbol function_parameters) [34900 34906])
                            ("namespace" variable nil (reparse-symbol function_parameters) [34908 34917])
                            ("values" variable nil (reparse-symbol function_parameters) [34919 34925])
                            ("option_string" variable nil (reparse-symbol function_parameters) [34927 34940]))                          )
                        (reparse-symbol indented_block_body) [34881 34998]))                  
                :type "class")
                nil [34514 34998])
            ("_VersionAction" type
               (:superclasses ("Action")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [35258 35434])
                            ("self" variable nil (reparse-symbol indented_block_body) [35443 35465]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35048 35052])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [35071 35085])
                            ("version" variable nil (reparse-symbol function_parameters) [35104 35111])
                            ("dest" variable nil (reparse-symbol function_parameters) [35135 35139])
                            ("default" variable nil (reparse-symbol function_parameters) [35167 35174])
                            ("help" variable nil (reparse-symbol function_parameters) [35202 35206]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35035 35466])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35484 35488])
                            ("parser" variable nil (reparse-symbol function_parameters) [35490 35496])
                            ("namespace" variable nil (reparse-symbol function_parameters) [35498 35507])
                            ("values" variable nil (reparse-symbol function_parameters) [35509 35515])
                            ("option_string" variable nil (reparse-symbol function_parameters) [35517 35530]))                          )
                        (reparse-symbol indented_block_body) [35471 35767]))                  
                :type "class")
                nil [35000 35767])
            ("_SubParsersAction" type
               (:superclasses ("Action")
                :members 
                  ( ("_ChoicesPseudoAction" type
                       (:superclasses ("Action")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("sup" variable nil (reparse-symbol indented_block_body) [35896 35953])
                                    ("sup" code nil (reparse-symbol indented_block_body) [35966 36019]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [35865 35869])
                                    ("name" variable nil (reparse-symbol function_parameters) [35871 35875])
                                    ("help" variable nil (reparse-symbol function_parameters) [35877 35881]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [35852 36020]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [35807 36020])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [36232 36256])
                            ("self" variable nil (reparse-symbol indented_block_body) [36265 36298])
                            ("self" variable nil (reparse-symbol indented_block_body) [36307 36357])
                            ("self" variable nil (reparse-symbol indented_block_body) [36366 36392])
                            ("super" code nil (reparse-symbol indented_block_body) [36402 36629]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36038 36042])
                            ("option_strings" variable nil (reparse-symbol function_parameters) [36061 36075])
                            ("prog" variable nil (reparse-symbol function_parameters) [36094 36098])
                            ("parser_class" variable nil (reparse-symbol function_parameters) [36117 36129])
                            ("dest" variable nil (reparse-symbol function_parameters) [36148 36152])
                            ("help" variable nil (reparse-symbol function_parameters) [36180 36184])
                            ("metavar" variable nil (reparse-symbol function_parameters) [36208 36215]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36025 36630])
                    ("add_parser" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36650 36654])
                            ("name" variable nil (reparse-symbol function_parameters) [36656 36660])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36662 36670]))                          )
                        (reparse-symbol indented_block_body) [36635 37232])
                    ("_get_subactions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37257 37261]))                          )
                        (reparse-symbol indented_block_body) [37237 37301])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37319 37323])
                            ("parser" variable nil (reparse-symbol function_parameters) [37325 37331])
                            ("namespace" variable nil (reparse-symbol function_parameters) [37333 37342])
                            ("values" variable nil (reparse-symbol function_parameters) [37344 37350])
                            ("option_string" variable nil (reparse-symbol function_parameters) [37352 37365]))                          )
                        (reparse-symbol indented_block_body) [37306 38579]))                  
                :type "class")
                nil [35769 38579])
            ("FileType" type
               (:documentation "Factory for creating file object types

    Instances of FileType are typically passed as type= arguments to the
    ArgumentParser add_argument() method.

    Keyword Arguments:
        - mode -- A string indicating how the file is to be opened. Accepts the
            same values as the builtin open() function.
        - bufsize -- The file's desired buffer size. Accepts the same values as
            the builtin open() function.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [39161 39178])
                            ("self" variable nil (reparse-symbol indented_block_body) [39187 39210]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39124 39128])
                            ("mode" variable nil (reparse-symbol function_parameters) [39130 39134])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [39140 39147]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39111 39211])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39229 39233])
                            ("string" variable nil (reparse-symbol function_parameters) [39235 39241]))                          )
                        (reparse-symbol indented_block_body) [39216 39849])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39867 39871]))                          )
                        (reparse-symbol indented_block_body) [39854 40042]))                  
                :type "class")
                nil [38631 40042])
            ("Namespace" type
               (:documentation "Simple object for storing attributes.

    Implements equality by attribute names and values, and provides a simple
    string representation.
    "
                :superclasses ("_AttributeHolder")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("for" code nil (reparse-symbol indented_block_body) [40374 40440]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40349 40353])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [40355 40363]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40336 40440])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [40445 40460])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40477 40481])
                            ("other" variable nil (reparse-symbol function_parameters) [40483 40488]))                          )
                        (reparse-symbol indented_block_body) [40466 40611])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40627 40631])
                            ("other" variable nil (reparse-symbol function_parameters) [40633 40638]))                          )
                        (reparse-symbol indented_block_body) [40616 40755])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40777 40781])
                            ("key" variable nil (reparse-symbol function_parameters) [40783 40786]))                          )
                        (reparse-symbol indented_block_body) [40760 40825]))                  
                :type "class")
                nil [40138 40825])
            ("_ActionsContainer" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [41024 41065])
                            ("self" variable nil (reparse-symbol indented_block_body) [41075 41105])
                            ("self" variable nil (reparse-symbol indented_block_body) [41114 41154])
                            ("self" variable nil (reparse-symbol indented_block_body) [41163 41195])
                            ("self" variable nil (reparse-symbol indented_block_body) [41204 41244])
                            ("self" variable nil (reparse-symbol indented_block_body) [41282 41303])
                            ("self" code nil (reparse-symbol indented_block_body) [41340 41383])
                            ("self" code nil (reparse-symbol indented_block_body) [41392 41438])
                            ("self" code nil (reparse-symbol indented_block_body) [41447 41504])
                            ("self" code nil (reparse-symbol indented_block_body) [41513 41568])
                            ("self" code nil (reparse-symbol indented_block_body) [41577 41634])
                            ("self" code nil (reparse-symbol indented_block_body) [41643 41691])
                            ("self" code nil (reparse-symbol indented_block_body) [41700 41759])
                            ("self" code nil (reparse-symbol indented_block_body) [41768 41814])
                            ("self" code nil (reparse-symbol indented_block_body) [41823 41867])
                            ("self" code nil (reparse-symbol indented_block_body) [41876 41926])
                            ("self" code nil (reparse-symbol indented_block_body) [41935 41988])
                            ("self" code nil (reparse-symbol indented_block_body) [42062 42081])
                            ("self" variable nil (reparse-symbol indented_block_body) [42116 42134])
                            ("self" variable nil (reparse-symbol indented_block_body) [42143 42175])
                            ("self" variable nil (reparse-symbol indented_block_body) [42202 42226])
                            ("self" variable nil (reparse-symbol indented_block_body) [42235 42271])
                            ("self" variable nil (reparse-symbol indented_block_body) [42308 42327])
                            ("self" variable nil (reparse-symbol indented_block_body) [42407 42473])
                            ("self" variable nil (reparse-symbol indented_block_body) [42620 42660]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40878 40882])
                            ("description" variable nil (reparse-symbol function_parameters) [40901 40912])
                            ("prefix_chars" variable nil (reparse-symbol function_parameters) [40931 40943])
                            ("argument_default" variable nil (reparse-symbol function_parameters) [40962 40978])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [40997 41013]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40865 42661])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42760 42764])
                            ("registry_name" variable nil (reparse-symbol function_parameters) [42766 42779])
                            ("value" variable nil (reparse-symbol function_parameters) [42781 42786])
                            ("object" variable nil (reparse-symbol function_parameters) [42788 42794]))                          )
                        (reparse-symbol indented_block_body) [42747 42896])
                    ("_registry_get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42919 42923])
                            ("registry_name" variable nil (reparse-symbol function_parameters) [42925 42938])
                            ("value" variable nil (reparse-symbol function_parameters) [42940 42945])
                            ("default" variable nil (reparse-symbol function_parameters) [42947 42954]))                          )
                        (reparse-symbol indented_block_body) [42901 43029])
                    ("set_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43174 43178])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43180 43188]))                          )
                        (reparse-symbol indented_block_body) [43157 43486])
                    ("get_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43507 43511])
                            ("dest" variable nil (reparse-symbol function_parameters) [43513 43517]))                          )
                        (reparse-symbol indented_block_body) [43491 43708])
                    ("add_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43821 43825])
                            ("args" variable nil (reparse-symbol function_parameters) [43827 43832])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [43834 43842]))                          
                        :documentation "
        add_argument(dest, ..., name=value, ...)
        add_argument(option_string, option_string, ..., name=value, ...)
        ")
                        (reparse-symbol indented_block_body) [43804 45765])
                    ("add_argument_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45793 45797])
                            ("args" variable nil (reparse-symbol function_parameters) [45799 45804])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45806 45814]))                          )
                        (reparse-symbol indented_block_body) [45770 45934])
                    ("add_mutually_exclusive_group" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45972 45976])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [45978 45986]))                          )
                        (reparse-symbol indented_block_body) [45939 46120])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46141 46145])
                            ("action" variable nil (reparse-symbol function_parameters) [46147 46153]))                          )
                        (reparse-symbol indented_block_body) [46125 46878])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46902 46906])
                            ("action" variable nil (reparse-symbol function_parameters) [46908 46914]))                          )
                        (reparse-symbol indented_block_body) [46883 46954])
                    ("_add_container_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46986 46990])
                            ("container" variable nil (reparse-symbol function_parameters) [46992 47001]))                          )
                        (reparse-symbol indented_block_body) [46959 48684])
                    ("_get_positional_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48716 48720])
                            ("dest" variable nil (reparse-symbol function_parameters) [48722 48726])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [48728 48736]))                          )
                        (reparse-symbol indented_block_body) [48689 49355])
                    ("_get_optional_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49385 49389])
                            ("args" variable nil (reparse-symbol function_parameters) [49391 49396])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [49398 49406]))                          )
                        (reparse-symbol indented_block_body) [49360 50921])
                    ("_pop_action_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50948 50952])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [50954 50960])
                            ("default" variable nil (reparse-symbol function_parameters) [50962 50969]))                          )
                        (reparse-symbol indented_block_body) [50926 51084])
                    ("_get_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51106 51110]))                          )
                        (reparse-symbol indented_block_body) [51089 51460])
                    ("_check_conflict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51485 51489])
                            ("action" variable nil (reparse-symbol function_parameters) [51491 51497]))                          )
                        (reparse-symbol indented_block_body) [51465 52015])
                    ("_handle_conflict_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52047 52051])
                            ("action" variable nil (reparse-symbol function_parameters) [52053 52059])
                            ("conflicting_actions" variable nil (reparse-symbol function_parameters) [52061 52080]))                          )
                        (reparse-symbol indented_block_body) [52020 52378])
                    ("_handle_conflict_resolve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52412 52416])
                            ("action" variable nil (reparse-symbol function_parameters) [52418 52424])
                            ("conflicting_actions" variable nil (reparse-symbol function_parameters) [52426 52445]))                          )
                        (reparse-symbol indented_block_body) [52383 52921]))                  
                :type "class")
                nil [40827 52921])
            ("_ArgumentGroup" type
               (:superclasses ("_ActionsContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("update" variable nil (reparse-symbol indented_block_body) [53118 53144])
                            ("update" code nil (reparse-symbol indented_block_body) [53153 53207])
                            ("update" code nil (reparse-symbol indented_block_body) [53216 53262])
                            ("update" code nil (reparse-symbol indented_block_body) [53271 53325])
                            ("super_init" variable nil (reparse-symbol indented_block_body) [53334 53383])
                            ("super_init" code nil (reparse-symbol indented_block_body) [53392 53437])
                            ("self" variable nil (reparse-symbol indented_block_body) [53474 53492])
                            ("self" variable nil (reparse-symbol indented_block_body) [53501 53525])
                            ("self" variable nil (reparse-symbol indented_block_body) [53586 53626])
                            ("self" variable nil (reparse-symbol indented_block_body) [53635 53669])
                            ("self" variable nil (reparse-symbol indented_block_body) [53678 53740])
                            ("self" variable nil (reparse-symbol indented_block_body) [53749 53785])
                            ("self" variable nil (reparse-symbol indented_block_body) [53794 53886])
                            ("self" variable nil (reparse-symbol indented_block_body) [53895 53965]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52982 52986])
                            ("container" variable nil (reparse-symbol function_parameters) [52988 52997])
                            ("title" variable nil (reparse-symbol function_parameters) [52999 53004])
                            ("description" variable nil (reparse-symbol function_parameters) [53011 53022])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [53029 53037]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [52969 53966])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53987 53991])
                            ("action" variable nil (reparse-symbol function_parameters) [53993 53999]))                          )
                        (reparse-symbol indented_block_body) [53971 54132])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54156 54160])
                            ("action" variable nil (reparse-symbol function_parameters) [54162 54168]))                          )
                        (reparse-symbol indented_block_body) [54137 54273]))                  
                :type "class")
                nil [52923 54273])
            ("_MutuallyExclusiveGroup" type
               (:superclasses ("_ArgumentGroup")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [54382 54438])
                            ("self" variable nil (reparse-symbol indented_block_body) [54447 54471])
                            ("self" variable nil (reparse-symbol indented_block_body) [54480 54507]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54340 54344])
                            ("container" variable nil (reparse-symbol function_parameters) [54346 54355])
                            ("required" variable nil (reparse-symbol function_parameters) [54357 54365]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [54327 54508])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54529 54533])
                            ("action" variable nil (reparse-symbol function_parameters) [54535 54541]))                          )
                        (reparse-symbol indented_block_body) [54513 54793])
                    ("_remove_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54817 54821])
                            ("action" variable nil (reparse-symbol function_parameters) [54823 54829]))                          )
                        (reparse-symbol indented_block_body) [54798 54922]))                  
                :type "class")
                nil [54275 54922])
            ("ArgumentParser" type
               (:documentation "Object for parsing command line strings into Python objects.

    Keyword Arguments:
        - prog -- The name of the program (default: sys.argv[0])
        - usage -- A usage message (default: auto-generated from arguments)
        - description -- A description of what the program does
        - epilog -- Text following the argument descriptions
        - parents -- Parsers whose arguments should be copied into this one
        - formatter_class -- HelpFormatter class for printing help messages
        - prefix_chars -- Characters that prefix optional arguments
        - fromfile_prefix_chars -- Characters that prefix files containing
            additional arguments
        - argument_default -- The default value for all arguments
        - conflict_handler -- String indicating how to handle conflicts
        - add_help -- Add a -h/-help option
    "
                :superclasses ("_AttributeHolder" "_ActionsContainer")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [56318 56640])
                            ("superinit" variable nil (reparse-symbol indented_block_body) [56649 56697])
                            ("superinit" code nil (reparse-symbol indented_block_body) [56706 56891])
                            ("if" code nil (reparse-symbol indented_block_body) [56936 57004])
                            ("self" variable nil (reparse-symbol indented_block_body) [57013 57029])
                            ("self" variable nil (reparse-symbol indented_block_body) [57038 57056])
                            ("self" variable nil (reparse-symbol indented_block_body) [57065 57085])
                            ("self" variable nil (reparse-symbol indented_block_body) [57094 57116])
                            ("self" variable nil (reparse-symbol indented_block_body) [57125 57163])
                            ("self" variable nil (reparse-symbol indented_block_body) [57172 57222])
                            ("self" variable nil (reparse-symbol indented_block_body) [57231 57255])
                            ("add_group" variable nil (reparse-symbol indented_block_body) [57265 57300])
                            ("self" variable nil (reparse-symbol indented_block_body) [57309 57365])
                            ("self" variable nil (reparse-symbol indented_block_body) [57374 57426])
                            ("self" variable nil (reparse-symbol indented_block_body) [57435 57458])
                            ("identity" function (:arguments 
                              ( ("string" variable nil (reparse-symbol function_parameters) [57506 57512]))                              ) (reparse-symbol indented_block_body) [57493 57541])
                            ("self" code nil (reparse-symbol indented_block_body) [57549 57586])
                            ("prefix_chars" code nil (reparse-symbol indented_block_body) [57770 57785])
                            ("if" code nil (reparse-symbol indented_block_body) [57794 58012])
                            ("if" code nil (reparse-symbol indented_block_body) [58020 58288])
                            ("for" code nil (reparse-symbol indented_block_body) [58341 58595]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55877 55881])
                            ("prog" variable nil (reparse-symbol function_parameters) [55900 55904])
                            ("usage" variable nil (reparse-symbol function_parameters) [55928 55933])
                            ("description" variable nil (reparse-symbol function_parameters) [55957 55968])
                            ("epilog" variable nil (reparse-symbol function_parameters) [55992 55998])
                            ("version" variable nil (reparse-symbol function_parameters) [56022 56029])
                            ("parents" variable nil (reparse-symbol function_parameters) [56053 56060])
                            ("formatter_class" variable nil (reparse-symbol function_parameters) [56082 56097])
                            ("prefix_chars" variable nil (reparse-symbol function_parameters) [56130 56142])
                            ("fromfile_prefix_chars" variable nil (reparse-symbol function_parameters) [56165 56186])
                            ("argument_default" variable nil (reparse-symbol function_parameters) [56210 56226])
                            ("conflict_handler" variable nil (reparse-symbol function_parameters) [56250 56266])
                            ("add_help" variable nil (reparse-symbol function_parameters) [56293 56301]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [55864 58595])
                    ("_get_kwargs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58706 58710]))                          )
                        (reparse-symbol indented_block_body) [58690 58982])
                    ("add_subparsers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59129 59133])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [59135 59143]))                          )
                        (reparse-symbol indented_block_body) [59110 60458])
                    ("_add_action" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60479 60483])
                            ("action" variable nil (reparse-symbol function_parameters) [60485 60491]))                          )
                        (reparse-symbol indented_block_body) [60463 60662])
                    ("_get_optional_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60693 60697]))                          )
                        (reparse-symbol indented_block_body) [60667 60809])
                    ("_get_positional_actions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60842 60846]))                          )
                        (reparse-symbol indented_block_body) [60814 60962])
                    ("parse_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61114 61118])
                            ("args" variable nil (reparse-symbol function_parameters) [61120 61124])
                            ("namespace" variable nil (reparse-symbol function_parameters) [61131 61140]))                          )
                        (reparse-symbol indented_block_body) [61099 61340])
                    ("parse_known_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61366 61370])
                            ("args" variable nil (reparse-symbol function_parameters) [61372 61376])
                            ("namespace" variable nil (reparse-symbol function_parameters) [61383 61392]))                          )
                        (reparse-symbol indented_block_body) [61345 62709])
                    ("_parse_known_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62736 62740])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [62742 62753])
                            ("namespace" variable nil (reparse-symbol function_parameters) [62755 62764]))                          )
                        (reparse-symbol indented_block_body) [62714 74260])
                    ("_read_args_from_files" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74291 74295])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [74297 74308]))                          )
                        (reparse-symbol indented_block_body) [74265 75469])
                    ("convert_arg_line_to_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75503 75507])
                            ("arg_line" variable nil (reparse-symbol function_parameters) [75509 75517]))                          )
                        (reparse-symbol indented_block_body) [75474 75546])
                    ("_match_argument" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75571 75575])
                            ("action" variable nil (reparse-symbol function_parameters) [75577 75583])
                            ("arg_strings_pattern" variable nil (reparse-symbol function_parameters) [75585 75604]))                          )
                        (reparse-symbol indented_block_body) [75551 76354])
                    ("_match_arguments_partial" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76388 76392])
                            ("actions" variable nil (reparse-symbol function_parameters) [76394 76401])
                            ("arg_strings_pattern" variable nil (reparse-symbol function_parameters) [76403 76422]))                          )
                        (reparse-symbol indented_block_body) [76359 77028])
                    ("_parse_optional" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77053 77057])
                            ("arg_string" variable nil (reparse-symbol function_parameters) [77059 77069]))                          )
                        (reparse-symbol indented_block_body) [77033 79449])
                    ("_get_option_tuples" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79477 79481])
                            ("option_string" variable nil (reparse-symbol function_parameters) [79483 79496]))                          )
                        (reparse-symbol indented_block_body) [79454 81373])
                    ("_get_nargs_pattern" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81401 81405])
                            ("action" variable nil (reparse-symbol function_parameters) [81407 81413]))                          )
                        (reparse-symbol indented_block_body) [81378 82697])
                    ("_get_values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82811 82815])
                            ("action" variable nil (reparse-symbol function_parameters) [82817 82823])
                            ("arg_strings" variable nil (reparse-symbol function_parameters) [82825 82836]))                          )
                        (reparse-symbol indented_block_body) [82795 84862])
                    ("_get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84882 84886])
                            ("action" variable nil (reparse-symbol function_parameters) [84888 84894])
                            ("arg_string" variable nil (reparse-symbol function_parameters) [84896 84906]))                          )
                        (reparse-symbol indented_block_body) [84867 85804])
                    ("_check_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85826 85830])
                            ("action" variable nil (reparse-symbol function_parameters) [85832 85838])
                            ("value" variable nil (reparse-symbol function_parameters) [85840 85845]))                          )
                        (reparse-symbol indented_block_body) [85809 86159])
                    ("format_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86271 86275]))                          )
                        (reparse-symbol indented_block_body) [86254 86475])
                    ("format_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86496 86500]))                          )
                        (reparse-symbol indented_block_body) [86480 87208])
                    ("format_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87232 87236]))                          )
                        (reparse-symbol indented_block_body) [87213 87578])
                    ("_get_formatter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87602 87606]))                          )
                        (reparse-symbol indented_block_body) [87583 87661])
                    ("print_usage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87766 87770])
                            ("file" variable nil (reparse-symbol function_parameters) [87772 87776]))                          )
                        (reparse-symbol indented_block_body) [87750 87895])
                    ("print_help" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87915 87919])
                            ("file" variable nil (reparse-symbol function_parameters) [87921 87925]))                          )
                        (reparse-symbol indented_block_body) [87900 88043])
                    ("print_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88066 88070])
                            ("file" variable nil (reparse-symbol function_parameters) [88072 88076]))                          )
                        (reparse-symbol indented_block_body) [88048 88357])
                    ("_print_message" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88381 88385])
                            ("message" variable nil (reparse-symbol function_parameters) [88387 88394])
                            ("file" variable nil (reparse-symbol function_parameters) [88396 88400]))                          )
                        (reparse-symbol indented_block_body) [88362 88524])
                    ("exit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88604 88608])
                            ("status" variable nil (reparse-symbol function_parameters) [88610 88616])
                            ("message" variable nil (reparse-symbol function_parameters) [88620 88627]))                          )
                        (reparse-symbol indented_block_body) [88595 88735])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88750 88754])
                            ("message" variable nil (reparse-symbol function_parameters) [88756 88763]))                          
                        :documentation "error(message: string)

        Prints a usage message incorporating the message to stderr and
        exits.

        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        ")
                        (reparse-symbol indented_block_body) [88740 89125]))                  
                :type "class")
                nil [54924 89125]))          
      :file "argparse.py"
      :pointmax 89125
      :fsize 89124
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax '((NAME 57721 . 57735) (IF 57742 . 57744) (ELSE 57765 . 57769) (INDENT_BLOCK 39743 . 39849) (NEWLINE 39742 . 39743) (COLON 39741 . 39742) (TRY 39650 . 39653) (AS 39737 . 39739)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1157])
            ("errno" include nil nil [1163 1180])
            ("sys" include nil nil [1163 1180])
            ("_names" variable nil nil [1182 1215])
            ("__all__" variable nil nil [1265 1440])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1464 1470]))              ) nil [1442 1600])
            ("if" code nil nil [1601 3131])
            ("sys" variable nil nil [3132 3161])
            ("" code nil nil [3182 3250])
            ("del" code nil nil [3252 3262])
            ("SEEK_SET" variable nil nil [3384 3396])
            ("SEEK_CUR" variable nil nil [3397 3409])
            ("SEEK_END" variable nil nil [3410 3422])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3532 3536])
                    ("mode" variable nil (reparse-symbol function_parameters) [3538 3542]))                  )
                nil [3519 4271])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4287 4291]))                  )
                nil [4272 4978])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4991 4994])
                    ("new" variable nil (reparse-symbol function_parameters) [4996 4999]))                  )
                nil [4979 5846])
            ("__all__" code nil nil [5847 5900])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune the
    search, or to impose a specific order of visiting.  Modifying dirnames when
    topdown is false is ineffective, since the directories in dirnames have
    already been generated by the time dirnames itself is generated. No matter
    the value of topdown, the list of subdirectories is retrieved before the
    tuples for the directory and its subdirectories are generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories

    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5911 5914])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5916 5923])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5930 5937])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5944 5955]))                  )
                nil [5902 9834])
            ("__all__" code nil nil [9835 9857])
            ("try" code nil nil [9899 9951])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9962 9966])
                    ("args" variable nil (reparse-symbol function_parameters) [9968 9973]))                  )
                nil [9952 10121])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10133 10137])
                    ("args" variable nil (reparse-symbol function_parameters) [10139 10144]))                  )
                nil [10122 10348])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10360 10364])
                    ("args" variable nil (reparse-symbol function_parameters) [10366 10371]))                  )
                nil [10349 10557])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10570 10574])
                    ("args" variable nil (reparse-symbol function_parameters) [10576 10581]))                  )
                nil [10558 10827])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10839 10843])
                    ("args" variable nil (reparse-symbol function_parameters) [10845 10849]))                  )
                nil [10828 11080])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [11093 11097])
                    ("args" variable nil (reparse-symbol function_parameters) [11099 11103])
                    ("env" variable nil (reparse-symbol function_parameters) [11105 11108]))                  )
                nil [11081 11375])
            ("__all__" code nil nil [11376 11448])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11463 11467])
                ("args" variable nil (reparse-symbol function_parameters) [11469 11473])
                ("env" variable nil (reparse-symbol function_parameters) [11475 11478]))              ) nil [11450 12318])
            ("try" code nil nil [12380 16589])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16601 16604])
                    ("default" variable nil (reparse-symbol function_parameters) [16606 16613]))                  )
                nil [16590 16797])
            ("__all__" code nil nil [16797 16821])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16835 16839]))              ) nil [16823 16871])
            ("if" code nil nil [16915 19818])
            ("if" code nil nil [19819 20816])
            ("if" code nil nil [20818 21924])
            ("if" code nil nil [21958 25224])
            ("copy_reg" include nil nil [25225 25253])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25277 25280])
                ("dict" variable nil (reparse-symbol function_parameters) [25282 25286]))              ) nil [25255 25323])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25348 25350]))              ) nil [25324 25425])
            ("try" code nil nil [25426 25560])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25586 25589])
                ("dict" variable nil (reparse-symbol function_parameters) [25591 25595]))              ) nil [25561 25635])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25663 25665]))              ) nil [25636 25743])
            ("try" code nil nil [25744 25911]))          
      :file "os.py"
      :pointmax 25911
      :fsize 25910
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("'''This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values

'''" code nil nil [1 536])
            ("__all__" variable nil nil [538 612])
            ("_abcoll" include nil nil [761 782])
            ("_abcoll" include nil nil [783 797])
            ("__all__" variable nil nil [798 824])
            ("_collections" include nil nil [826 869])
            ("operator" include nil nil [870 927])
            ("keyword" include nil nil [928 971])
            ("sys" include nil nil [972 990])
            ("heapq" include nil nil [991 1013])
            ("itertools" include nil nil [1014 1091])
            ("itertools" include nil nil [1092 1127])
            ("try" code nil nil [1129 1254])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [1464 1507])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [2110 2313])
                            ("if" code nil (reparse-symbol indented_block_body) [2322 2461])
                            ("self" variable nil (reparse-symbol indented_block_body) [2469 2483])
                            ("args" variable nil (reparse-symbol indented_block_body) [2492 2507])
                            ("if" code nil (reparse-symbol indented_block_body) [2516 2614])
                            ("try" code nil (reparse-symbol indented_block_body) [2622 2823])
                            ("self" code nil (reparse-symbol indented_block_body) [2831 2859]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [2086 2091])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2093 2099]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2073 2860])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2881 2885])
                            ("key" variable nil (reparse-symbol function_parameters) [2887 2890])
                            ("value" variable nil (reparse-symbol function_parameters) [2892 2897])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [2899 2911]))                          )
                        (reparse-symbol indented_block_body) [2865 3333])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3354 3358])
                            ("key" variable nil (reparse-symbol function_parameters) [3360 3363])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [3365 3377]))                          )
                        (reparse-symbol indented_block_body) [3338 3848])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3866 3870]))                          )
                        (reparse-symbol indented_block_body) [3853 4251])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4273 4277]))                          )
                        (reparse-symbol indented_block_body) [4256 4677])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4692 4696]))                          )
                        (reparse-symbol indented_block_body) [4682 4872])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4961 4965]))                          )
                        (reparse-symbol indented_block_body) [4952 5036])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5052 5056]))                          )
                        (reparse-symbol indented_block_body) [5041 5148])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5163 5167]))                          )
                        (reparse-symbol indented_block_body) [5153 5277])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5295 5299]))                          )
                        (reparse-symbol indented_block_body) [5282 5387])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5407 5411]))                          )
                        (reparse-symbol indented_block_body) [5392 5524])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5543 5547]))                          )
                        (reparse-symbol indented_block_body) [5529 5676])
                    ("update" variable nil (reparse-symbol indented_block_body) [5681 5711])
                    ("__update" variable nil (reparse-symbol indented_block_body) [5717 5734])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [5799 5818])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5832 5836])
                            ("key" variable nil (reparse-symbol function_parameters) [5838 5841])
                            ("default" variable nil (reparse-symbol function_parameters) [5843 5850]))                          )
                        (reparse-symbol indented_block_body) [5824 6254])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6274 6278])
                            ("key" variable nil (reparse-symbol function_parameters) [6280 6283])
                            ("default" variable nil (reparse-symbol function_parameters) [6285 6292]))                          )
                        (reparse-symbol indented_block_body) [6259 6483])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6500 6504])
                            ("last" variable nil (reparse-symbol function_parameters) [6506 6510]))                          )
                        (reparse-symbol indented_block_body) [6488 6872])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6890 6894])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [6896 6909]))                          )
                        (reparse-symbol indented_block_body) [6877 7318])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7338 7342]))                          )
                        (reparse-symbol indented_block_body) [7323 7668])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7682 7686]))                          )
                        (reparse-symbol indented_block_body) [7673 7769])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [7804 7807])
                            ("iterable" variable nil (reparse-symbol function_parameters) [7809 7817])
                            ("value" variable nil (reparse-symbol function_parameters) [7819 7824]))                          )
                        (reparse-symbol indented_block_body) [7774 8074])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8090 8094])
                            ("other" variable nil (reparse-symbol function_parameters) [8096 8101]))                          )
                        (reparse-symbol indented_block_body) [8079 8426])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8442 8446])
                            ("other" variable nil (reparse-symbol function_parameters) [8448 8453]))                          )
                        (reparse-symbol indented_block_body) [8431 8523])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8618 8622]))                          )
                        (reparse-symbol indented_block_body) [8605 8730])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8750 8754]))                          )
                        (reparse-symbol indented_block_body) [8735 8860])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8879 8883]))                          )
                        (reparse-symbol indented_block_body) [8865 8994]))                  
                :type "class")
                nil [1435 8994])
            ("_class_template" variable nil nil [9174 10622])
            ("_repr_template" variable nil nil [10624 10652])
            ("_field_template" variable nil nil [10654 10767])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [10784 10792])
                    ("field_names" variable nil (reparse-symbol function_parameters) [10794 10805])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10807 10814])
                    ("rename" variable nil (reparse-symbol function_parameters) [10822 10828]))                  )
                nil [10769 14954])
            ("Counter" type
               (:superclasses ("dict")
                :members 
                  ( ("'''Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    '''" code nil (reparse-symbol indented_block_body) [15141 16842])
                    ("__init__" function
                       (:suite 
                          ( ("'''Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        '''" code nil (reparse-symbol indented_block_body) [17213 17740])
                            ("if" code nil (reparse-symbol indented_block_body) [17749 17884])
                            ("self" variable nil (reparse-symbol indented_block_body) [17892 17906])
                            ("args" variable nil (reparse-symbol indented_block_body) [17915 17930])
                            ("if" code nil (reparse-symbol indented_block_body) [17939 18037])
                            ("super" code nil (reparse-symbol indented_block_body) [18045 18076])
                            ("self" code nil (reparse-symbol indented_block_body) [18085 18111]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [17189 17194])
                            ("kwds" variable nil (reparse-symbol function_parameters) [17196 17202]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [17176 18112])
                    ("__missing__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18133 18137])
                            ("key" variable nil (reparse-symbol function_parameters) [18139 18142]))                          )
                        (reparse-symbol indented_block_body) [18117 18290])
                    ("most_common" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18311 18315])
                            ("n" variable nil (reparse-symbol function_parameters) [18317 18318]))                          )
                        (reparse-symbol indented_block_body) [18295 18804])
                    ("elements" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18822 18826]))                          )
                        (reparse-symbol indented_block_body) [18809 19627])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [19707 19710])
                            ("iterable" variable nil (reparse-symbol function_parameters) [19712 19720])
                            ("v" variable nil (reparse-symbol function_parameters) [19722 19723]))                          )
                        (reparse-symbol indented_block_body) [19677 19986])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [20002 20007])
                        ("kwds" variable nil (reparse-symbol function_parameters) [20009 20015]))                      ) (reparse-symbol indented_block_body) [19991 21857])
                    ("subtract" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [21875 21880])
                        ("kwds" variable nil (reparse-symbol function_parameters) [21882 21888]))                      ) (reparse-symbol indented_block_body) [21862 23325])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23339 23343]))                          )
                        (reparse-symbol indented_block_body) [23330 23415])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23435 23439]))                          )
                        (reparse-symbol indented_block_body) [23420 23487])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23508 23512])
                            ("elem" variable nil (reparse-symbol function_parameters) [23514 23518]))                          )
                        (reparse-symbol indented_block_body) [23492 23679])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23697 23701]))                          )
                        (reparse-symbol indented_block_body) [23684 23907])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24264 24268])
                            ("other" variable nil (reparse-symbol function_parameters) [24270 24275]))                          )
                        (reparse-symbol indented_block_body) [24252 24825])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24842 24846])
                            ("other" variable nil (reparse-symbol function_parameters) [24848 24853]))                          )
                        (reparse-symbol indented_block_body) [24830 25432])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25448 25452])
                            ("other" variable nil (reparse-symbol function_parameters) [25454 25459]))                          )
                        (reparse-symbol indented_block_body) [25437 26106])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26123 26127])
                            ("other" variable nil (reparse-symbol function_parameters) [26129 26134]))                          )
                        (reparse-symbol indented_block_body) [26111 26630]))                  
                :type "class")
                nil [15116 26630])
            ("if" code nil nil [26632 27799]))          
      :file "collections.py"
      :pointmax 27799
      :fsize 27798
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax '((NAME 27257 . 27267) (PAREN_BLOCK 27267 . 27283) (NAME 26915 . 26925) (PAREN_BLOCK 26925 . 26941) (NAME 26482 . 26490) (IF 26499 . 26501) (ELSE 26522 . 26526) (NAME 25832 . 25840) (IF 25855 . 25857) (ELSE 25878 . 25882) (NAME 22905 . 22913) (IF 22924 . 22926) (ELSE 22932 . 22936) (NAME 21244 . 21252) (IF 21263 . 21265) (ELSE 21271 . 21275) (INDENT_BLOCK 14392 . 14456) (NEWLINE 14391 . 14392) (COLON 14390 . 14391) (TRY 14315 . 14318) (AS 14386 . 14388)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("weakref" include nil nil [1763 1777])
            ("copy_reg" include nil nil [1778 1813])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1843 1847]))                  
                :type "class")
                nil [1815 1848])
            ("error" variable nil nil [1848 1861])
            ("try" code nil nil [1890 1982])
            ("__all__" variable nil nil [1983 2022])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2033 2034]))                  )
                nil [2024 2786])
            ("_copy_dispatch" variable nil nil [2788 2811])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [2833 2834]))              ) nil [2813 2850])
            ("for" code nil nil [2850 3084])
            ("for" code nil nil [3084 3228])
            ("_copy_with_constructor" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3256 3257]))              ) nil [3229 3282])
            ("for" code nil nil [3282 3344])
            ("_copy_with_copy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3372 3373]))              ) nil [3345 3396])
            ("if" code nil nil [3396 3468])
            ("_copy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3484 3485]))              ) nil [3469 3947])
            ("d" variable nil nil [3947 3981])
            ("del" code nil nil [3983 3988])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [4003 4004])
                    ("memo" variable nil (reparse-symbol function_parameters) [4006 4010])
                    ("_nil" variable nil (reparse-symbol function_parameters) [4017 4021]))                  )
                nil [3990 5472])
            ("_deepcopy_dispatch" variable nil nil [5473 5500])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5523 5524])
                ("memo" variable nil (reparse-symbol function_parameters) [5526 5530]))              ) nil [5502 5546])
            ("d" variable nil nil [5546 5578])
            ("d" variable nil nil [5579 5615])
            ("d" variable nil nil [5616 5641])
            ("d" variable nil nil [5642 5668])
            ("d" variable nil nil [5669 5696])
            ("d" variable nil nil [5697 5723])
            ("try" code nil nil [5724 5790])
            ("d" variable nil nil [5790 5815])
            ("try" code nil nil [5816 5882])
            ("try" code nil nil [5882 5960])
            ("d" variable nil nil [5960 5986])
            ("d" variable nil nil [5987 6015])
            ("d" variable nil nil [6016 6053])
            ("d" variable nil nil [6054 6101])
            ("d" variable nil nil [6102 6142])
            ("d" variable nil nil [6143 6176])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6197 6198])
                ("memo" variable nil (reparse-symbol function_parameters) [6200 6204]))              ) nil [6178 6303])
            ("d" variable nil nil [6303 6327])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6349 6350])
                ("memo" variable nil (reparse-symbol function_parameters) [6352 6356]))              ) nil [6329 6655])
            ("d" variable nil nil [6655 6681])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6702 6703])
                ("memo" variable nil (reparse-symbol function_parameters) [6705 6709]))              ) nil [6683 6848])
            ("d" variable nil nil [6848 6872])
            ("if" code nil nil [6873 6937])
            ("_deepcopy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6959 6960])
                ("memo" variable nil (reparse-symbol function_parameters) [6962 6966]))              ) nil [6938 7062])
            ("_deepcopy_dispatch" variable nil nil [7062 7117])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7135 7136])
                    ("memo" variable nil (reparse-symbol function_parameters) [7138 7142]))                  )
                nil [7119 7620])
            ("_deepcopy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7640 7641])
                ("memo" variable nil (reparse-symbol function_parameters) [7643 7647]))              ) nil [7621 8211])
            ("d" variable nil nil [8211 8249])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [8268 8269])
                ("info" variable nil (reparse-symbol function_parameters) [8271 8275])
                ("deep" variable nil (reparse-symbol function_parameters) [8277 8281])
                ("memo" variable nil (reparse-symbol function_parameters) [8283 8287]))              ) nil [8251 9710])
            ("del" code nil nil [9711 9716])
            ("del" code nil nil [9718 9727])
            ("_EmptyClass" type
               (:members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [9808 9812]))                  
                :type "class")
                nil [9785 9813])
            ("_test" function nil nil [9814 11494])
            ("if" code nil nil [11495 11534]))          
      :file "copy.py"
      :pointmax 11534
      :fsize 11533
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("try" code nil nil [5391 5454])
            ("__all__" variable nil nil [5472 5700])
            ("__version__" variable nil nil [5702 5723])
            ("I" variable nil nil [5733 5781])
            ("L" variable nil nil [5796 5836])
            ("U" variable nil nil [5867 5909])
            ("M" variable nil nil [5934 5980])
            ("S" variable nil nil [6013 6053])
            ("X" variable nil nil [6079 6121])
            ("T" variable nil nil [6209 6253])
            ("DEBUG" variable nil nil [6277 6311])
            ("error" variable nil nil [6362 6387])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6490 6497])
                    ("string" variable nil (reparse-symbol function_parameters) [6499 6505])
                    ("flags" variable nil (reparse-symbol function_parameters) [6507 6512]))                  )
                nil [6480 6691])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6703 6710])
                    ("string" variable nil (reparse-symbol function_parameters) [6712 6718])
                    ("flags" variable nil (reparse-symbol function_parameters) [6720 6725]))                  )
                nil [6692 6908])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6917 6924])
                    ("repl" variable nil (reparse-symbol function_parameters) [6926 6930])
                    ("string" variable nil (reparse-symbol function_parameters) [6932 6938])
                    ("count" variable nil (reparse-symbol function_parameters) [6940 6945])
                    ("flags" variable nil (reparse-symbol function_parameters) [6949 6954]))                  )
                nil [6909 7377])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7387 7394])
                    ("repl" variable nil (reparse-symbol function_parameters) [7396 7400])
                    ("string" variable nil (reparse-symbol function_parameters) [7402 7408])
                    ("count" variable nil (reparse-symbol function_parameters) [7410 7415])
                    ("flags" variable nil (reparse-symbol function_parameters) [7419 7424]))                  )
                nil [7378 7977])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7988 7995])
                    ("string" variable nil (reparse-symbol function_parameters) [7997 8003])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [8005 8013])
                    ("flags" variable nil (reparse-symbol function_parameters) [8017 8022]))                  )
                nil [7978 8214])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8227 8234])
                    ("string" variable nil (reparse-symbol function_parameters) [8236 8242])
                    ("flags" variable nil (reparse-symbol function_parameters) [8244 8249]))                  )
                nil [8215 8581])
            ("if" code nil nil [8582 8941])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8954 8961])
                ("flags" variable nil (reparse-symbol function_parameters) [8963 8968]))              ) nil [8942 9081])
            ("purge" function nil nil [9082 9179])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9193 9200])
                ("flags" variable nil (reparse-symbol function_parameters) [9202 9207]))              ) nil [9180 9311])
            ("_alphanum" variable nil nil [9312 9404])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9417 9424]))              ) nil [9406 13424]))          
      :file "re.py"
      :pointmax 13424
      :fsize 13423
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Text wrapping and filling.
\"\"\"" code nil nil [1 34])
            ("__revision__" variable nil nil [177 198])
            ("re" include nil nil [200 217])
            ("string" include nil nil [200 217])
            ("try" code nil nil [219 405])
            ("__all__" variable nil nil [693 744])
            ("_whitespace" variable nil nil [1249 1280])
            ("TextWrapper" type
               (:documentation "
    Object for wrapping/filling text.  The public interface consists of
    the wrap() and fill() methods; the other methods are just there for
    subclasses to override in order to tweak the default behaviour.
    If you want to completely replace the main wrapping algorithm,
    you'll probably have to override _wrap_chunks().

    Several instance attributes control various aspects of wrapping:
      width (default: 70)
        the maximum width of wrapped lines (unless break_long_words
        is false)
      initial_indent (default: \"\")
        string that will be prepended to the first line of wrapped
        output.  Counts towards the line's width.
      subsequent_indent (default: \"\")
        string that will be prepended to all lines save the first
        of wrapped output; also counts towards each line's width.
      expand_tabs (default: true)
        Expand tabs in input text to spaces before further processing.
        Each tab will become 1 .. 8 spaces, depending on its position in
        its line.  If false, each tab is treated as a single character.
      replace_whitespace (default: true)
        Replace all whitespace characters in the input text by spaces
        after tab expansion.  Note that if expand_tabs is false and
        replace_whitespace is true, every tab will be converted to a
        single space!
      fix_sentence_endings (default: false)
        Ensure that sentence-ending punctuation is always followed
        by two spaces.  Off by default because the algorithm is
        (unavoidably) imperfect.
      break_long_words (default: true)
        Break words longer than 'width'.  If false, those words will not
        be broken, and some lines might be longer than 'width'.
      break_on_hyphens (default: true)
        Allow breaking hyphenated words. If true, wrapping will occur
        preferably on whitespaces and right after hyphens part of
        compound words.
      drop_whitespace (default: true)
        Drop leading and trailing whitespace from lines.
    "
                :members 
                  ( ("whitespace_trans" variable nil (reparse-symbol indented_block_body) [3356 3428])
                    ("unicode_whitespace_trans" variable nil (reparse-symbol indented_block_body) [3434 3463])
                    ("uspace" variable nil (reparse-symbol indented_block_body) [3468 3486])
                    ("for" code nil (reparse-symbol indented_block_body) [3491 3568])
                    ("wordsep_re" variable nil (reparse-symbol indented_block_body) [3877 4085])
                    ("wordsep_simple_re" variable nil (reparse-symbol indented_block_body) [4327 4367])
                    ("sentence_end_re" variable nil (reparse-symbol indented_block_body) [4492 4839])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5217 5235])
                            ("self" variable nil (reparse-symbol indented_block_body) [5244 5280])
                            ("self" variable nil (reparse-symbol indented_block_body) [5289 5331])
                            ("self" variable nil (reparse-symbol indented_block_body) [5340 5370])
                            ("self" variable nil (reparse-symbol indented_block_body) [5379 5423])
                            ("self" variable nil (reparse-symbol indented_block_body) [5432 5480])
                            ("self" variable nil (reparse-symbol indented_block_body) [5489 5529])
                            ("self" variable nil (reparse-symbol indented_block_body) [5538 5576])
                            ("self" variable nil (reparse-symbol indented_block_body) [5585 5625])
                            ("self" variable nil (reparse-symbol indented_block_body) [5847 5910])
                            ("self" variable nil (reparse-symbol indented_block_body) [5919 6009]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4859 4863])
                            ("width" variable nil (reparse-symbol function_parameters) [4882 4887])
                            ("initial_indent" variable nil (reparse-symbol function_parameters) [4909 4923])
                            ("subsequent_indent" variable nil (reparse-symbol function_parameters) [4945 4962])
                            ("expand_tabs" variable nil (reparse-symbol function_parameters) [4984 4995])
                            ("replace_whitespace" variable nil (reparse-symbol function_parameters) [5019 5037])
                            ("fix_sentence_endings" variable nil (reparse-symbol function_parameters) [5061 5081])
                            ("break_long_words" variable nil (reparse-symbol function_parameters) [5106 5122])
                            ("drop_whitespace" variable nil (reparse-symbol function_parameters) [5146 5161])
                            ("break_on_hyphens" variable nil (reparse-symbol function_parameters) [5185 5201]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4846 6010])
                    ("_munge_whitespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6163 6167])
                            ("text" variable nil (reparse-symbol function_parameters) [6169 6173]))                          
                        :documentation "_munge_whitespace(text : string) -> string

        Munge whitespace in text: expand tabs and convert all other
        whitespace characters to spaces.  Eg. \" foo\\\\tbar\\\\n\\\\nbaz\"
        becomes \" foo    bar  baz\".
        ")
                        (reparse-symbol indented_block_body) [6141 6750])
                    ("_split" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6767 6771])
                            ("text" variable nil (reparse-symbol function_parameters) [6773 6777]))                          
                        :documentation "_split(text : string) -> [string]

        Split the text to wrap into indivisible chunks.  Chunks are
        not quite the same as words; see _wrap_chunks() for full
        details.  As an example, the text
          Look, goof-ball -- use the -b option!
        breaks into the following chunks:
          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', 'option!'
        if break_on_hyphens is True, or in:
          'Look,', ' ', 'goof-ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', option!'
        otherwise.
        ")
                        (reparse-symbol indented_block_body) [6756 7840])
                    ("_fix_sentence_endings" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7871 7875])
                            ("chunks" variable nil (reparse-symbol function_parameters) [7877 7883]))                          
                        :documentation "_fix_sentence_endings(chunks : [string])

        Correct for sentence endings buried in 'chunks'.  Eg. when the
        original text contains \"... foo.\\\\nBar ...\", munge_whitespace()
        and split() will convert that to [..., \"foo.\", \" \", \"Bar\", ...]
        which has one too few spaces; this method simply changes the one
        space to two.
        ")
                        (reparse-symbol indented_block_body) [7845 8515])
                    ("_handle_long_word" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8542 8546])
                            ("reversed_chunks" variable nil (reparse-symbol function_parameters) [8548 8563])
                            ("cur_line" variable nil (reparse-symbol function_parameters) [8565 8573])
                            ("cur_len" variable nil (reparse-symbol function_parameters) [8575 8582])
                            ("width" variable nil (reparse-symbol function_parameters) [8584 8589]))                          
                        :documentation "_handle_long_word(chunks : [string],
                             cur_line : [string],
                             cur_len : int, width : int)

        Handle a chunk of text (most likely a word, not whitespace) that
        is too long to fit in any line.
        ")
                        (reparse-symbol indented_block_body) [8520 9710])
                    ("_wrap_chunks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10078 10082])
                            ("chunks" variable nil (reparse-symbol function_parameters) [10084 10090]))                          
                        :documentation "_wrap_chunks(chunks : [string]) -> [string]

        Wrap a sequence of text chunks and return a list of lines of
        length 'self.width' or less.  (If 'break_long_words' is false,
        some lines may be longer than this.)  Chunks correspond roughly
        to words and the whitespace between them: each chunk is
        indivisible (modulo 'break_long_words'), but a line break can
        come between any two chunks.  Chunks should not have internal
        whitespace; ie. a chunk is either all whitespace or a \"word\".
        Whitespace chunks will be removed from the beginning and end of
        lines, but apart from that whitespace is preserved.
        ")
                        (reparse-symbol indented_block_body) [10061 12813])
                    ("wrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12902 12906])
                            ("text" variable nil (reparse-symbol function_parameters) [12908 12912]))                          
                        :documentation "wrap(text : string) -> [string]

        Reformat the single paragraph in 'text' so it fits in lines of
        no more than 'self.width' columns, and return a list of wrapped
        lines.  Tabs in 'text' are expanded with string.expandtabs(),
        and all other whitespace characters (including newline) are
        converted to space.
        ")
                        (reparse-symbol indented_block_body) [12893 13485])
                    ("fill" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13499 13503])
                            ("text" variable nil (reparse-symbol function_parameters) [13505 13509]))                          
                        :documentation "fill(text : string) -> string

        Reformat the single paragraph in 'text' to fit in lines of no
        more than 'self.width' columns, and return a new string
        containing the entire wrapped paragraph.
        ")
                        (reparse-symbol indented_block_body) [13490 13791]))                  
                :type "class")
                nil [1282 13791])
            ("wrap" function
               (:documentation "Wrap a single paragraph of text, returning a list of wrapped lines.

    Reformat the single paragraph in 'text' so it fits in lines of no
    more than 'width' columns, and return a list of wrapped lines.  By
    default, tabs in 'text' are expanded with string.expandtabs(), and
    all other whitespace characters (including newline) are converted to
    space.  See TextWrapper class for available keyword args to customize
    wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [13876 13880])
                    ("width" variable nil (reparse-symbol function_parameters) [13882 13887])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [13892 13900]))                  )
                nil [13867 14437])
            ("fill" function
               (:documentation "Fill a single paragraph of text, returning a new string.

    Reformat the single paragraph in 'text' to fit in lines of no more
    than 'width' columns, and return a new string containing the entire
    wrapped paragraph.  As with wrap(), tabs are expanded and other
    whitespace characters converted to space.  See TextWrapper class for
    available keyword args to customize wrapping behaviour.
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [14447 14451])
                    ("width" variable nil (reparse-symbol function_parameters) [14453 14458])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14463 14471]))                  )
                nil [14438 14958])
            ("_whitespace_only_re" variable nil nil [15034 15092])
            ("_leading_whitespace_re" variable nil nil [15093 15167])
            ("dedent" function
               (:documentation "Remove any common leading whitespace from every line in `text`.

    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.

    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines \"  hello\" and \"\\\\thello\" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
    "
                :arguments 
                  ( ("text" variable nil (reparse-symbol function_parameters) [15180 15184]))                  )
                nil [15169 17043])
            ("if" code nil nil [17044 17216]))          
      :file "textwrap.py"
      :pointmax 17216
      :fsize 17215
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internationalization and localization support.

This module provides internationalization (I18N) and localization (L10N)
support for your Python programs by providing an interface to the GNU gettext
message catalog library.

I18N refers to the operation by which a program is made aware of multiple
languages.  L10N refers to the adaptation of your program, once
internationalized, to the local language and cultural habits.

\"\"\"" code nil nil [1 433])
            ("sys" include nil nil [2049 2089])
            ("struct" include nil nil [2049 2089])
            ("re" include nil nil [2049 2089])
            ("os" include nil nil [2049 2089])
            ("copy" include nil nil [2049 2089])
            ("locale" include nil nil [2049 2089])
            ("errno" include nil nil [2090 2114])
            ("__all__" variable nil nil [2117 2427])
            ("_default_localedir" variable nil nil [2429 2493])
            ("test" function
               (:documentation "
    Implements the C expression:

      condition ? true : false

    Required to correctly interpret plural forms.
    "
                :arguments 
                  ( ("condition" variable nil (reparse-symbol function_parameters) [2505 2514])
                    ("true" variable nil (reparse-symbol function_parameters) [2516 2520])
                    ("false" variable nil (reparse-symbol function_parameters) [2522 2527]))                  )
                nil [2496 2731])
            ("c2py" function
               (:documentation "Gets a C expression as used in PO files for plural forms and returns a
    Python lambda function that implements an equivalent expression.
    "
                :arguments 
                  ( ("plural" variable nil (reparse-symbol function_parameters) [2742 2748]))                  )
                nil [2733 4668])
            ("_expand_lang" function (:arguments 
              ( ("locale" variable nil (reparse-symbol function_parameters) [4688 4694]))              ) nil [4671 5836])
            ("NullTranslations" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5904 5919])
                            ("self" variable nil (reparse-symbol indented_block_body) [5928 5948])
                            ("self" variable nil (reparse-symbol indented_block_body) [5957 5984])
                            ("self" variable nil (reparse-symbol indented_block_body) [5993 6014])
                            ("if" code nil (reparse-symbol indented_block_body) [6023 6070]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5880 5884])
                            ("fp" variable nil (reparse-symbol function_parameters) [5886 5888]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5867 6070])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6086 6090])
                            ("fp" variable nil (reparse-symbol function_parameters) [6092 6094]))                          )
                        (reparse-symbol indented_block_body) [6075 6110])
                    ("add_fallback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6132 6136])
                            ("fallback" variable nil (reparse-symbol function_parameters) [6138 6146]))                          )
                        (reparse-symbol indented_block_body) [6115 6278])
                    ("gettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6295 6299])
                            ("message" variable nil (reparse-symbol function_parameters) [6301 6308]))                          )
                        (reparse-symbol indented_block_body) [6283 6412])
                    ("lgettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6430 6434])
                            ("message" variable nil (reparse-symbol function_parameters) [6436 6443]))                          )
                        (reparse-symbol indented_block_body) [6417 6548])
                    ("ngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6566 6570])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [6572 6578])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [6580 6586])
                            ("n" variable nil (reparse-symbol function_parameters) [6588 6589]))                          )
                        (reparse-symbol indented_block_body) [6553 6766])
                    ("lngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6785 6789])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [6791 6797])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [6799 6805])
                            ("n" variable nil (reparse-symbol function_parameters) [6807 6808]))                          )
                        (reparse-symbol indented_block_body) [6771 6986])
                    ("ugettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7004 7008])
                            ("message" variable nil (reparse-symbol function_parameters) [7010 7017]))                          )
                        (reparse-symbol indented_block_body) [6991 7131])
                    ("ungettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7150 7154])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [7156 7162])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [7164 7170])
                            ("n" variable nil (reparse-symbol function_parameters) [7172 7173]))                          )
                        (reparse-symbol indented_block_body) [7136 7369])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7383 7387]))                          )
                        (reparse-symbol indented_block_body) [7374 7416])
                    ("charset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7433 7437]))                          )
                        (reparse-symbol indented_block_body) [7421 7469])
                    ("output_charset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7493 7497]))                          )
                        (reparse-symbol indented_block_body) [7474 7536])
                    ("set_output_charset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7564 7568])
                            ("charset" variable nil (reparse-symbol function_parameters) [7570 7577]))                          )
                        (reparse-symbol indented_block_body) [7541 7619])
                    ("install" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7636 7640])
                            ("unicode" variable nil (reparse-symbol function_parameters) [7642 7649])
                            ("names" variable nil (reparse-symbol function_parameters) [7657 7662]))                          )
                        (reparse-symbol indented_block_body) [7624 8328]))                  
                :type "class")
                nil [5839 8328])
            ("GNUTranslations" type
               (:superclasses ("NullTranslations")
                :members 
                  ( ("LE_MAGIC" variable nil (reparse-symbol indented_block_body) [8407 8429])
                    ("BE_MAGIC" variable nil (reparse-symbol indented_block_body) [8434 8456])
                    ("_parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8473 8477])
                            ("fp" variable nil (reparse-symbol function_parameters) [8479 8481]))                          
                        :documentation "Override this method to support alternative .mo formats.")
                        (reparse-symbol indented_block_body) [8462 12285])
                    ("gettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12302 12306])
                            ("message" variable nil (reparse-symbol function_parameters) [12308 12315]))                          )
                        (reparse-symbol indented_block_body) [12290 12788])
                    ("lgettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12806 12810])
                            ("message" variable nil (reparse-symbol function_parameters) [12812 12819]))                          )
                        (reparse-symbol indented_block_body) [12793 13186])
                    ("ngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13204 13208])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [13210 13216])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [13218 13224])
                            ("n" variable nil (reparse-symbol function_parameters) [13226 13227]))                          )
                        (reparse-symbol indented_block_body) [13191 13725])
                    ("lngettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13744 13748])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [13750 13756])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [13758 13764])
                            ("n" variable nil (reparse-symbol function_parameters) [13766 13767]))                          )
                        (reparse-symbol indented_block_body) [13730 14222])
                    ("ugettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14240 14244])
                            ("message" variable nil (reparse-symbol function_parameters) [14246 14253]))                          )
                        (reparse-symbol indented_block_body) [14227 14505])
                    ("ungettext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14524 14528])
                            ("msgid1" variable nil (reparse-symbol function_parameters) [14530 14536])
                            ("msgid2" variable nil (reparse-symbol function_parameters) [14538 14544])
                            ("n" variable nil (reparse-symbol function_parameters) [14546 14547]))                          )
                        (reparse-symbol indented_block_body) [14510 14884]))                  
                :type "class")
                nil [8330 14884])
            ("find" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [14942 14948])
                ("localedir" variable nil (reparse-symbol function_parameters) [14950 14959])
                ("languages" variable nil (reparse-symbol function_parameters) [14966 14975])
                ("all" variable nil (reparse-symbol function_parameters) [14982 14985]))              ) nil [14933 16038])
            ("_translations" variable nil nil [16107 16125])
            ("translation" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [16143 16149])
                ("localedir" variable nil (reparse-symbol function_parameters) [16151 16160])
                ("languages" variable nil (reparse-symbol function_parameters) [16167 16176])
                ("class_" variable nil (reparse-symbol function_parameters) [16199 16205])
                ("fallback" variable nil (reparse-symbol function_parameters) [16212 16220])
                ("codeset" variable nil (reparse-symbol function_parameters) [16228 16235]))              ) nil [16127 17222])
            ("install" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [17236 17242])
                ("localedir" variable nil (reparse-symbol function_parameters) [17244 17253])
                ("unicode" variable nil (reparse-symbol function_parameters) [17260 17267])
                ("codeset" variable nil (reparse-symbol function_parameters) [17275 17282])
                ("names" variable nil (reparse-symbol function_parameters) [17289 17294]))              ) nil [17224 17403])
            ("_localedirs" variable nil nil [17453 17469])
            ("_localecodesets" variable nil nil [17507 17527])
            ("_current_domain" variable nil nil [17602 17630])
            ("textdomain" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [17648 17654]))              ) nil [17633 17776])
            ("bindtextdomain" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [17797 17803])
                ("localedir" variable nil (reparse-symbol function_parameters) [17805 17814]))              ) nil [17778 17970])
            ("bind_textdomain_codeset" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18000 18006])
                ("codeset" variable nil (reparse-symbol function_parameters) [18008 18015]))              ) nil [17972 18159])
            ("dgettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18174 18180])
                ("message" variable nil (reparse-symbol function_parameters) [18182 18189]))              ) nil [18161 18398])
            ("ldgettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18413 18419])
                ("message" variable nil (reparse-symbol function_parameters) [18421 18428]))              ) nil [18399 18638])
            ("dngettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18653 18659])
                ("msgid1" variable nil (reparse-symbol function_parameters) [18661 18667])
                ("msgid2" variable nil (reparse-symbol function_parameters) [18669 18675])
                ("n" variable nil (reparse-symbol function_parameters) [18677 18678]))              ) nil [18639 18960])
            ("ldngettext" function (:arguments 
              ( ("domain" variable nil (reparse-symbol function_parameters) [18976 18982])
                ("msgid1" variable nil (reparse-symbol function_parameters) [18984 18990])
                ("msgid2" variable nil (reparse-symbol function_parameters) [18992 18998])
                ("n" variable nil (reparse-symbol function_parameters) [19000 19001]))              ) nil [18961 19284])
            ("gettext" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [19297 19304]))              ) nil [19285 19353])
            ("lgettext" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [19367 19374]))              ) nil [19354 19424])
            ("ngettext" function (:arguments 
              ( ("msgid1" variable nil (reparse-symbol function_parameters) [19438 19444])
                ("msgid2" variable nil (reparse-symbol function_parameters) [19446 19452])
                ("n" variable nil (reparse-symbol function_parameters) [19454 19455]))              ) nil [19425 19515])
            ("lngettext" function (:arguments 
              ( ("msgid1" variable nil (reparse-symbol function_parameters) [19530 19536])
                ("msgid2" variable nil (reparse-symbol function_parameters) [19538 19544])
                ("n" variable nil (reparse-symbol function_parameters) [19546 19547]))              ) nil [19516 19608])
            ("Catalog" variable nil nil [20046 20067]))          
      :file "gettext.py"
      :pointmax 20068
      :fsize 20067
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 2022])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2040 2044]))                          )
                        (reparse-symbol indented_block_body) [2027 2067])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2110 2113])
                            ("C" variable nil (reparse-symbol function_parameters) [2115 2116]))                          )
                        (reparse-symbol indented_block_body) [2072 2269]))                  
                :type "class")
                nil [1841 2269])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2288 2311])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2349 2353]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2317 2373])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2416 2419])
                            ("C" variable nil (reparse-symbol function_parameters) [2421 2422]))                          )
                        (reparse-symbol indented_block_body) [2378 2547]))                  
                :type "class")
                nil [2271 2547])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2570 2593])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2636 2640])
                            ("x" variable nil (reparse-symbol function_parameters) [2642 2643]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2599 2667])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2710 2713])
                            ("C" variable nil (reparse-symbol function_parameters) [2715 2716]))                          )
                        (reparse-symbol indented_block_body) [2672 2850]))                  
                :type "class")
                nil [2549 2850])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2872 2895])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2934 2938])
                            ("args" variable nil (reparse-symbol function_parameters) [2940 2945])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2947 2953]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2901 2977])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3020 3023])
                            ("C" variable nil (reparse-symbol function_parameters) [3025 3026]))                          )
                        (reparse-symbol indented_block_body) [2982 3155]))                  
                :type "class")
                nil [2852 3155])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3584 3588])
                            ("other" variable nil (reparse-symbol function_parameters) [3590 3595]))                          )
                        (reparse-symbol indented_block_body) [3573 3840])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3856 3860])
                            ("other" variable nil (reparse-symbol function_parameters) [3862 3867]))                          )
                        (reparse-symbol indented_block_body) [3845 4004])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4020 4024])
                            ("other" variable nil (reparse-symbol function_parameters) [4026 4031]))                          )
                        (reparse-symbol indented_block_body) [4009 4168])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4184 4188])
                            ("other" variable nil (reparse-symbol function_parameters) [4190 4195]))                          )
                        (reparse-symbol indented_block_body) [4173 4440])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4456 4460])
                            ("other" variable nil (reparse-symbol function_parameters) [4462 4467]))                          )
                        (reparse-symbol indented_block_body) [4445 4605])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4621 4625])
                            ("other" variable nil (reparse-symbol function_parameters) [4627 4632]))                          )
                        (reparse-symbol indented_block_body) [4610 4670])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4711 4714])
                            ("it" variable nil (reparse-symbol function_parameters) [4716 4718]))                          )
                        (reparse-symbol indented_block_body) [4675 4947])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4964 4968])
                            ("other" variable nil (reparse-symbol function_parameters) [4970 4975]))                          )
                        (reparse-symbol indented_block_body) [4952 5134])
                    ("__rand__" variable nil (reparse-symbol indented_block_body) [5139 5157])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5178 5182])
                            ("other" variable nil (reparse-symbol function_parameters) [5184 5189]))                          )
                        (reparse-symbol indented_block_body) [5163 5359])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5375 5379])
                            ("other" variable nil (reparse-symbol function_parameters) [5381 5386]))                          )
                        (reparse-symbol indented_block_body) [5364 5563])
                    ("__ror__" variable nil (reparse-symbol indented_block_body) [5568 5584])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5602 5606])
                            ("other" variable nil (reparse-symbol function_parameters) [5608 5613]))                          )
                        (reparse-symbol indented_block_body) [5590 5905])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5923 5927])
                            ("other" variable nil (reparse-symbol function_parameters) [5929 5934]))                          )
                        (reparse-symbol indented_block_body) [5910 6226])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6243 6247])
                            ("other" variable nil (reparse-symbol function_parameters) [6249 6254]))                          )
                        (reparse-symbol indented_block_body) [6231 6476])
                    ("__rxor__" variable nil (reparse-symbol indented_block_body) [6481 6499])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [6576 6591])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6607 6611]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [6597 7600]))                  
                :type "class")
                nil [3172 7600])
            ("Set" code nil nil [7601 7624])
            ("MutableSet" type
               (:documentation "A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8085 8089])
                            ("value" variable nil (reparse-symbol function_parameters) [8091 8096]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [8057 8163])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8200 8204])
                            ("value" variable nil (reparse-symbol function_parameters) [8206 8211]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [8168 8319])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8335 8339])
                            ("value" variable nil (reparse-symbol function_parameters) [8341 8346]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [8324 8509])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8522 8526]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [8514 8766])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8781 8785]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [8771 8963])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8980 8984])
                            ("it" variable nil (reparse-symbol function_parameters) [8986 8988]))                          )
                        (reparse-symbol indented_block_body) [8968 9064])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9082 9086])
                            ("it" variable nil (reparse-symbol function_parameters) [9088 9090]))                          )
                        (reparse-symbol indented_block_body) [9069 9179])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9197 9201])
                            ("it" variable nil (reparse-symbol function_parameters) [9203 9205]))                          )
                        (reparse-symbol indented_block_body) [9184 9536])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9554 9558])
                            ("it" variable nil (reparse-symbol function_parameters) [9560 9562]))                          )
                        (reparse-symbol indented_block_body) [9541 9712]))                  
                :type "class")
                nil [7627 9712])
            ("MutableSet" code nil nil [9713 9737])
            ("Mapping" type
               (:documentation "A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.

    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10054 10058])
                            ("key" variable nil (reparse-symbol function_parameters) [10060 10063]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10018 10089])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10102 10106])
                            ("key" variable nil (reparse-symbol function_parameters) [10108 10111])
                            ("default" variable nil (reparse-symbol function_parameters) [10113 10120]))                          )
                        (reparse-symbol indented_block_body) [10094 10293])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10315 10319])
                            ("key" variable nil (reparse-symbol function_parameters) [10321 10324]))                          )
                        (reparse-symbol indented_block_body) [10298 10450])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10468 10472]))                          )
                        (reparse-symbol indented_block_body) [10455 10558])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10578 10582]))                          )
                        (reparse-symbol indented_block_body) [10563 10699])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10718 10722]))                          )
                        (reparse-symbol indented_block_body) [10704 10857])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10871 10875]))                          )
                        (reparse-symbol indented_block_body) [10862 10943])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10958 10962]))                          )
                        (reparse-symbol indented_block_body) [10948 11082])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11098 11102]))                          )
                        (reparse-symbol indented_block_body) [11087 11191])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [11271 11286])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11303 11307])
                            ("other" variable nil (reparse-symbol function_parameters) [11309 11314]))                          )
                        (reparse-symbol indented_block_body) [11292 11451])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11467 11471])
                            ("other" variable nil (reparse-symbol function_parameters) [11473 11478]))                          )
                        (reparse-symbol indented_block_body) [11456 11516]))                  
                :type "class")
                nil [9759 11516])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [11585 11608]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11561 11565])
                            ("mapping" variable nil (reparse-symbol function_parameters) [11567 11574]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11548 11609])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11626 11630]))                          )
                        (reparse-symbol indented_block_body) [11614 11667])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11685 11689]))                          )
                        (reparse-symbol indented_block_body) [11672 11761]))                  
                :type "class")
                nil [11517 11761])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11838 11842])
                            ("it" variable nil (reparse-symbol function_parameters) [11844 11846]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [11802 11872])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11894 11898])
                            ("key" variable nil (reparse-symbol function_parameters) [11900 11903]))                          )
                        (reparse-symbol indented_block_body) [11877 11942])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11960 11964]))                          )
                        (reparse-symbol indented_block_body) [11947 12023]))                  
                :type "class")
                nil [11763 12023])
            ("KeysView" code nil nil [12024 12062])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("_from_iterable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12140 12144])
                            ("it" variable nil (reparse-symbol function_parameters) [12146 12148]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12104 12174])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12196 12200])
                            ("item" variable nil (reparse-symbol function_parameters) [12202 12206]))                          )
                        (reparse-symbol indented_block_body) [12179 12377])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12395 12399]))                          )
                        (reparse-symbol indented_block_body) [12382 12480]))                  
                :type "class")
                nil [12064 12480])
            ("ItemsView" code nil nil [12481 12521])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12576 12580])
                            ("value" variable nil (reparse-symbol function_parameters) [12582 12587]))                          )
                        (reparse-symbol indented_block_body) [12559 12717])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12735 12739]))                          )
                        (reparse-symbol indented_block_body) [12722 12813]))                  
                :type "class")
                nil [12523 12813])
            ("ValuesView" code nil nil [12814 12856])
            ("MutableMapping" type
               (:documentation "A MutableMapping is a generic container for associating
    key/value pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __setitem__, __delitem__,
    __iter__, and __len__.

    "
                :superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13178 13182])
                            ("key" variable nil (reparse-symbol function_parameters) [13184 13187])
                            ("value" variable nil (reparse-symbol function_parameters) [13189 13194]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13142 13220])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13261 13265])
                            ("key" variable nil (reparse-symbol function_parameters) [13267 13270]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13225 13296])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [13301 13320])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13334 13338])
                            ("key" variable nil (reparse-symbol function_parameters) [13340 13343])
                            ("default" variable nil (reparse-symbol function_parameters) [13345 13352]))                          )
                        (reparse-symbol indented_block_body) [13326 13771])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13788 13792]))                          )
                        (reparse-symbol indented_block_body) [13776 14120])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14135 14139]))                          )
                        (reparse-symbol indented_block_body) [14125 14307])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [14323 14328])
                        ("kwds" variable nil (reparse-symbol function_parameters) [14330 14336]))                      ) (reparse-symbol indented_block_body) [14312 15478])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15498 15502])
                            ("key" variable nil (reparse-symbol function_parameters) [15504 15507])
                            ("default" variable nil (reparse-symbol function_parameters) [15509 15516]))                          )
                        (reparse-symbol indented_block_body) [15483 15721]))                  
                :type "class")
                nil [12858 15721])
            ("MutableMapping" code nil nil [15722 15751])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16008 16012])
                            ("index" variable nil (reparse-symbol function_parameters) [16014 16019]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15972 16047])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16065 16069]))                          )
                        (reparse-symbol indented_block_body) [16052 16244])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16266 16270])
                            ("value" variable nil (reparse-symbol function_parameters) [16272 16277]))                          )
                        (reparse-symbol indented_block_body) [16249 16379])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16401 16405]))                          )
                        (reparse-symbol indented_block_body) [16384 16479])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16494 16498])
                            ("value" variable nil (reparse-symbol function_parameters) [16500 16505]))                          )
                        (reparse-symbol indented_block_body) [16484 16761])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16776 16780])
                            ("value" variable nil (reparse-symbol function_parameters) [16782 16787]))                          )
                        (reparse-symbol indented_block_body) [16766 16917]))                  
                :type "class")
                nil [15774 16917])
            ("Sequence" code nil nil [16918 16942])
            ("Sequence" code nil nil [16943 16972])
            ("Sequence" code nil nil [16973 16998])
            ("Sequence" code nil nil [16999 17024])
            ("MutableSequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().

    "
                :superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17287 17291])
                            ("index" variable nil (reparse-symbol function_parameters) [17293 17298])
                            ("value" variable nil (reparse-symbol function_parameters) [17300 17305]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17251 17333])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17374 17378])
                            ("index" variable nil (reparse-symbol function_parameters) [17380 17385]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17338 17413])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17449 17453])
                            ("index" variable nil (reparse-symbol function_parameters) [17455 17460])
                            ("value" variable nil (reparse-symbol function_parameters) [17462 17467]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17418 17559])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17575 17579])
                            ("value" variable nil (reparse-symbol function_parameters) [17581 17586]))                          )
                        (reparse-symbol indented_block_body) [17564 17698])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17715 17719]))                          )
                        (reparse-symbol indented_block_body) [17703 17874])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17890 17894])
                            ("values" variable nil (reparse-symbol function_parameters) [17896 17902]))                          )
                        (reparse-symbol indented_block_body) [17879 18045])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18058 18062])
                            ("index" variable nil (reparse-symbol function_parameters) [18064 18069]))                          )
                        (reparse-symbol indented_block_body) [18050 18308])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18324 18328])
                            ("value" variable nil (reparse-symbol function_parameters) [18330 18335]))                          )
                        (reparse-symbol indented_block_body) [18313 18507])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18525 18529])
                            ("values" variable nil (reparse-symbol function_parameters) [18531 18537]))                          )
                        (reparse-symbol indented_block_body) [18512 18588]))                  
                :type "class")
                nil [17027 18588])
            ("MutableSequence" code nil nil [18589 18619]))          
      :file "_abcoll.py"
      :pointmax 18620
      :fsize 18619
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    ./python Lib/keyword.py
\"\"\"" code nil nil [25 282])
            ("__all__" variable nil nil [284 317])
            ("kwlist" variable nil nil [319 882])
            ("iskeyword" variable nil nil [884 926])
            ("main" function nil nil [928 1958])
            ("if" code nil nil [1959 1997]))          
      :file "keyword.py"
      :pointmax 1997
      :fsize 1996
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
\"\"\"" code nil nil [28 1297])
            ("__about__" variable nil nil [1381 6117])
            ("__all__" variable nil nil [6119 6238])
            ("itertools" include nil nil [6240 6299])
            ("operator" include nil nil [6300 6331])
            ("cmp_lt" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6344 6345])
                ("y" variable nil (reparse-symbol function_parameters) [6347 6348]))              ) nil [6333 6510])
            ("heappush" function
               (:documentation "Push item onto heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6524 6528])
                    ("item" variable nil (reparse-symbol function_parameters) [6530 6534]))                  )
                nil [6511 6658])
            ("heappop" function
               (:documentation "Pop the smallest item off the heap, maintaining the heap invariant."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [6671 6675]))                  )
                nil [6659 6987])
            ("heapreplace" function
               (:documentation "Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    "
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7004 7008])
                    ("item" variable nil (reparse-symbol function_parameters) [7010 7014]))                  )
                nil [6988 7601])
            ("heappushpop" function
               (:documentation "Fast version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [7618 7622])
                    ("item" variable nil (reparse-symbol function_parameters) [7624 7628]))                  )
                nil [7602 7809])
            ("heapify" function
               (:documentation "Transform list into a heap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [7822 7823]))                  )
                nil [7810 8338])
            ("_heappushpop_max" function
               (:documentation "Maxheap version of a heappush followed by a heappop."
                :arguments 
                  ( ("heap" variable nil (reparse-symbol function_parameters) [8360 8364])
                    ("item" variable nil (reparse-symbol function_parameters) [8366 8370]))                  )
                nil [8339 8558])
            ("_heapify_max" function
               (:documentation "Transform list into a maxheap, in-place, in O(len(x)) time."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [8576 8577]))                  )
                nil [8559 8727])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [8741 8742])
                    ("iterable" variable nil (reparse-symbol function_parameters) [8744 8752]))                  )
                nil [8728 9152])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [9167 9168])
                    ("iterable" variable nil (reparse-symbol function_parameters) [9170 9178]))                  )
                nil [9153 9563])
            ("_siftdown" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [9747 9751])
                ("startpos" variable nil (reparse-symbol function_parameters) [9753 9761])
                ("pos" variable nil (reparse-symbol function_parameters) [9763 9766]))              ) nil [9733 10597])
            ("_siftup" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12213 12217])
                ("pos" variable nil (reparse-symbol function_parameters) [12219 12222]))              ) nil [12201 12941])
            ("_siftdown_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [12960 12964])
                ("startpos" variable nil (reparse-symbol function_parameters) [12966 12974])
                ("pos" variable nil (reparse-symbol function_parameters) [12976 12979]))              ) nil [12942 13386])
            ("_siftup_max" function (:arguments 
              ( ("heap" variable nil (reparse-symbol function_parameters) [13403 13407])
                ("pos" variable nil (reparse-symbol function_parameters) [13409 13412]))              ) nil [13387 14165])
            ("try" code nil nil [14203 14262])
            ("merge" function (:arguments 
              ( ("iterables" variable nil (reparse-symbol function_parameters) [14273 14283]))              ) nil [14263 15563])
            ("_nsmallest" variable nil nil [15642 15664])
            ("nsmallest" function
               (:documentation "Find the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [15679 15680])
                    ("iterable" variable nil (reparse-symbol function_parameters) [15682 15690])
                    ("key" variable nil (reparse-symbol function_parameters) [15692 15695]))                  )
                nil [15665 16816])
            ("_nlargest" variable nil nil [16817 16837])
            ("nlargest" function
               (:documentation "Find the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [16851 16852])
                    ("iterable" variable nil (reparse-symbol function_parameters) [16854 16862])
                    ("key" variable nil (reparse-symbol function_parameters) [16864 16867]))                  )
                nil [16838 18014])
            ("if" code nil nil [18015 18296]))          
      :file "heapq.py"
      :pointmax 18296
      :fsize 18295
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax '((RETURN 6453 . 6459) (IF 6468 . 6470) (ELSE 6492 . 6496)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997])
            ("__all__" variable nil nil [2042 2094]))          
      :file "types.py"
      :pointmax 2095
      :fsize 2094
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Weak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
\"\"\"" code nil nil [1 130])
            ("UserDict" include nil nil [332 347])
            ("" code nil nil [370 493])
            ("_weakrefset" include nil nil [495 543])
            ("exceptions" include nil nil [545 582])
            ("ProxyTypes" variable nil nil [585 628])
            ("__all__" variable nil nil [630 850])
            ("WeakValueDictionary" type
               (:documentation "Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1391 1538])
                            ("self" variable nil (reparse-symbol indented_block_body) [1546 1560])
                            ("args" variable nil (reparse-symbol indented_block_body) [1569 1584])
                            ("if" code nil (reparse-symbol indented_block_body) [1593 1691])
                            ("remove" function (:arguments 
                              ( ("wr" variable nil (reparse-symbol function_parameters) [1710 1712])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1714 1721]))                              ) (reparse-symbol indented_block_body) [1699 1954])
                            ("self" variable nil (reparse-symbol indented_block_body) [1962 1983])
                            ("self" variable nil (reparse-symbol indented_block_body) [2031 2058])
                            ("self" variable nil (reparse-symbol indented_block_body) [2067 2090])
                            ("UserDict" code nil (reparse-symbol indented_block_body) [2099 2144]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [1369 1374])
                            ("kw" variable nil (reparse-symbol function_parameters) [1376 1380]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1356 2145])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2171 2175]))                          )
                        (reparse-symbol indented_block_body) [2150 2408])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2429 2433])
                            ("key" variable nil (reparse-symbol function_parameters) [2435 2438]))                          )
                        (reparse-symbol indented_block_body) [2413 2559])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2580 2584])
                            ("key" variable nil (reparse-symbol function_parameters) [2586 2589]))                          )
                        (reparse-symbol indented_block_body) [2564 2690])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2712 2716])
                            ("key" variable nil (reparse-symbol function_parameters) [2718 2721]))                          )
                        (reparse-symbol indented_block_body) [2695 2849])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2866 2870])
                            ("key" variable nil (reparse-symbol function_parameters) [2872 2875]))                          )
                        (reparse-symbol indented_block_body) [2854 3003])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3021 3025]))                          )
                        (reparse-symbol indented_block_body) [3008 3084])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3105 3109])
                            ("key" variable nil (reparse-symbol function_parameters) [3111 3114])
                            ("value" variable nil (reparse-symbol function_parameters) [3116 3121]))                          )
                        (reparse-symbol indented_block_body) [3089 3255])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3270 3274]))                          )
                        (reparse-symbol indented_block_body) [3260 3374])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3388 3392]))                          )
                        (reparse-symbol indented_block_body) [3379 3572])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [3577 3592])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3615 3619])
                            ("memo" variable nil (reparse-symbol function_parameters) [3621 3625]))                          )
                        (reparse-symbol indented_block_body) [3598 3850])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3863 3867])
                            ("key" variable nil (reparse-symbol function_parameters) [3869 3872])
                            ("default" variable nil (reparse-symbol function_parameters) [3874 3881]))                          )
                        (reparse-symbol indented_block_body) [3855 4163])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4178 4182]))                          )
                        (reparse-symbol indented_block_body) [4168 4345])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4364 4368]))                          )
                        (reparse-symbol indented_block_body) [4350 4560])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4578 4582]))                          )
                        (reparse-symbol indented_block_body) [4565 4688])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [4693 4712])
                    ("itervaluerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4736 4740]))                          
                        :documentation "Return an iterator that yields the weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [4718 5265])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5285 5289]))                          )
                        (reparse-symbol indented_block_body) [5270 5467])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5484 5488]))                          )
                        (reparse-symbol indented_block_body) [5472 5702])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5715 5719])
                            ("key" variable nil (reparse-symbol function_parameters) [5721 5724])
                            ("args" variable nil (reparse-symbol function_parameters) [5726 5731]))                          )
                        (reparse-symbol indented_block_body) [5707 6039])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6059 6063])
                            ("key" variable nil (reparse-symbol function_parameters) [6065 6068])
                            ("default" variable nil (reparse-symbol function_parameters) [6070 6077]))                          )
                        (reparse-symbol indented_block_body) [6044 6365])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [6381 6386])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [6388 6396]))                      ) (reparse-symbol indented_block_body) [6370 7101])
                    ("valuerefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7120 7124]))                          
                        :documentation "Return a list of weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [7106 7558])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7574 7578]))                          )
                        (reparse-symbol indented_block_body) [7563 7730]))                  
                :type "class")
                nil [853 7730])
            ("KeyedRef" type
               (:documentation "Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    "
                :superclasses ("ref")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [8116 8134])
                    ("__new__" function (:arguments 
                      ( ("type" variable nil (reparse-symbol function_parameters) [8152 8156])
                        ("ob" variable nil (reparse-symbol function_parameters) [8158 8160])
                        ("callback" variable nil (reparse-symbol function_parameters) [8162 8170])
                        ("key" variable nil (reparse-symbol function_parameters) [8172 8175]))                      ) (reparse-symbol indented_block_body) [8140 8268])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [8320 8365]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8286 8290])
                            ("ob" variable nil (reparse-symbol function_parameters) [8292 8294])
                            ("callback" variable nil (reparse-symbol function_parameters) [8296 8304])
                            ("key" variable nil (reparse-symbol function_parameters) [8306 8309]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8273 8366]))                  
                :type "class")
                nil [7732 8366])
            ("WeakKeyDictionary" type
               (:documentation " Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    "
                :superclasses ("UserDict.UserDict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8860 8874])
                            ("remove" function (:arguments 
                              ( ("k" variable nil (reparse-symbol function_parameters) [8894 8895])
                                ("selfref" variable nil (reparse-symbol function_parameters) [8897 8904]))                              ) (reparse-symbol indented_block_body) [8883 9127])
                            ("self" variable nil (reparse-symbol indented_block_body) [9135 9156])
                            ("self" variable nil (reparse-symbol indented_block_body) [9220 9247])
                            ("self" variable nil (reparse-symbol indented_block_body) [9256 9279])
                            ("if" code nil (reparse-symbol indented_block_body) [9288 9339]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8834 8838])
                            ("dict" variable nil (reparse-symbol function_parameters) [8840 8844]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8821 9339])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9365 9369]))                          )
                        (reparse-symbol indented_block_body) [9344 9816])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9837 9841])
                            ("key" variable nil (reparse-symbol function_parameters) [9843 9846]))                          )
                        (reparse-symbol indented_block_body) [9821 9881])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9902 9906])
                            ("key" variable nil (reparse-symbol function_parameters) [9908 9911]))                          )
                        (reparse-symbol indented_block_body) [9886 9949])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9967 9971]))                          )
                        (reparse-symbol indented_block_body) [9954 10028])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10049 10053])
                            ("key" variable nil (reparse-symbol function_parameters) [10055 10058])
                            ("value" variable nil (reparse-symbol function_parameters) [10060 10065]))                          )
                        (reparse-symbol indented_block_body) [10033 10118])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10132 10136]))                          )
                        (reparse-symbol indented_block_body) [10123 10320])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [10325 10340])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10363 10367])
                            ("memo" variable nil (reparse-symbol function_parameters) [10369 10373]))                          )
                        (reparse-symbol indented_block_body) [10346 10604])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10617 10621])
                            ("key" variable nil (reparse-symbol function_parameters) [10623 10626])
                            ("default" variable nil (reparse-symbol function_parameters) [10628 10635]))                          )
                        (reparse-symbol indented_block_body) [10609 10690])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10707 10711])
                            ("key" variable nil (reparse-symbol function_parameters) [10713 10716]))                          )
                        (reparse-symbol indented_block_body) [10695 10836])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10858 10862])
                            ("key" variable nil (reparse-symbol function_parameters) [10864 10867]))                          )
                        (reparse-symbol indented_block_body) [10841 10987])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11002 11006]))                          )
                        (reparse-symbol indented_block_body) [10992 11175])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11194 11198]))                          )
                        (reparse-symbol indented_block_body) [11180 11389])
                    ("iterkeyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11410 11414]))                          
                        :documentation "Return an iterator that yields the weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [11394 11933])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11951 11955]))                          )
                        (reparse-symbol indented_block_body) [11938 12131])
                    ("__iter__" variable nil (reparse-symbol indented_block_body) [12136 12155])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12176 12180]))                          )
                        (reparse-symbol indented_block_body) [12161 12296])
                    ("keyrefs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12313 12317]))                          
                        :documentation "Return a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        ")
                        (reparse-symbol indented_block_body) [12301 12745])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12759 12763]))                          )
                        (reparse-symbol indented_block_body) [12750 12913])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12930 12934]))                          )
                        (reparse-symbol indented_block_body) [12918 13083])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13096 13100])
                            ("key" variable nil (reparse-symbol function_parameters) [13102 13105])
                            ("args" variable nil (reparse-symbol function_parameters) [13107 13112]))                          )
                        (reparse-symbol indented_block_body) [13088 13161])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13181 13185])
                            ("key" variable nil (reparse-symbol function_parameters) [13187 13190])
                            ("default" variable nil (reparse-symbol function_parameters) [13192 13199]))                          )
                        (reparse-symbol indented_block_body) [13166 13275])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13291 13295])
                            ("dict" variable nil (reparse-symbol function_parameters) [13297 13301])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [13308 13316]))                          )
                        (reparse-symbol indented_block_body) [13280 13601]))                  
                :type "class")
                nil [8368 13601]))          
      :file "weakref.py"
      :pointmax 13601
      :fsize 13600
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax '((NAME 6713 . 6717) (IF 6728 . 6730) (ELSE 6736 . 6740)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [249 286])
            ("sys" include nil nil [288 304])
            ("_sre" include nil nil [288 304])
            ("sre_parse" include nil nil [305 321])
            ("sre_constants" include nil nil [322 349])
            ("assert" code nil nil [351 400])
            ("if" code nil nil [402 477])
            ("_LITERAL_CODES" variable nil nil [478 522])
            ("_REPEATING_CODES" variable nil nil [523 579])
            ("_SUCCESS_CODES" variable nil nil [580 620])
            ("_ASSERT_CODES" variable nil nil [621 662])
            ("_equivalences" variable nil nil [726 1816])
            ("_ignorecase_fixes" variable nil nil [1894 2003])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [2018 2022])
                ("pattern" variable nil (reparse-symbol function_parameters) [2024 2031])
                ("flags" variable nil (reparse-symbol function_parameters) [2033 2038]))              ) nil [2005 8018])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8040 8047])
                ("flags" variable nil (reparse-symbol function_parameters) [8049 8054])
                ("code" variable nil (reparse-symbol function_parameters) [8056 8060])
                ("fixup" variable nil (reparse-symbol function_parameters) [8062 8067])
                ("fixes" variable nil (reparse-symbol function_parameters) [8074 8079]))              ) nil [8019 8929])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [8952 8959])
                ("fixup" variable nil (reparse-symbol function_parameters) [8961 8966])
                ("fixes" variable nil (reparse-symbol function_parameters) [8968 8973])
                ("isunicode" variable nil (reparse-symbol function_parameters) [8975 8984]))              ) nil [8930 13942])
            ("_fixup_range" function (:arguments 
              ( ("lo" variable nil (reparse-symbol function_parameters) [13960 13962])
                ("hi" variable nil (reparse-symbol function_parameters) [13964 13966])
                ("ranges" variable nil (reparse-symbol function_parameters) [13968 13974])
                ("fixup" variable nil (reparse-symbol function_parameters) [13976 13981]))              ) nil [13943 14467])
            ("_CODEBITS" code nil nil [14468 14497])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [14545 14549])
                ("_CODEBITS" variable nil (reparse-symbol function_parameters) [14551 14560])
                ("_int" variable nil (reparse-symbol function_parameters) [14572 14576]))              ) nil [14530 14724])
            ("_bytes_to_codes" function (:arguments 
              ( ("b" variable nil (reparse-symbol function_parameters) [14745 14746]))              ) nil [14725 15021])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [15034 15036]))              ) nil [15022 15165])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [15184 15188])
                ("pattern" variable nil (reparse-symbol function_parameters) [15190 15197])
                ("flags" variable nil (reparse-symbol function_parameters) [15199 15204]))              ) nil [15166 18564])
            ("try" code nil nil [18565 18686])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [18700 18703]))              ) nil [18687 18800])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [18811 18812])
                ("flags" variable nil (reparse-symbol function_parameters) [18814 18819]))              ) nil [18801 19046])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [19059 19060])
                ("flags" variable nil (reparse-symbol function_parameters) [19062 19067]))              ) nil [19047 19791]))          
      :file "sre_compile.py"
      :pointmax 19791
      :fsize 19817
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("SPECIAL_CHARS" variable nil nil [386 417])
            ("REPEAT_CHARS" variable nil nil [418 439])
            ("DIGITS" variable nil nil [441 467])
            ("OCTDIGITS" variable nil nil [469 496])
            ("HEXDIGITS" variable nil nil [497 538])
            ("WHITESPACE" variable nil nil [540 571])
            ("ESCAPES" variable nil nil [573 849])
            ("CATEGORIES" variable nil nil [851 1327])
            ("FLAGS" variable nil nil [1329 1571])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1683 1697])
                            ("self" variable nil (reparse-symbol indented_block_body) [1706 1720])
                            ("self" variable nil (reparse-symbol indented_block_body) [1729 1744])
                            ("self" variable nil (reparse-symbol indented_block_body) [1753 1772])
                            ("self" variable nil (reparse-symbol indented_block_body) [1781 1800]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1668 1672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1655 1801])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1820 1824])
                            ("name" variable nil (reparse-symbol function_parameters) [1826 1830]))                          )
                        (reparse-symbol indented_block_body) [1806 2243])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2262 2266])
                            ("gid" variable nil (reparse-symbol function_parameters) [2268 2271]))                          )
                        (reparse-symbol indented_block_body) [2247 2304])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2323 2327])
                            ("gid" variable nil (reparse-symbol function_parameters) [2329 2332]))                          )
                        (reparse-symbol indented_block_body) [2308 2393]))                  
                :type "class")
                nil [1573 2393])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2505 2527])
                            ("if" code nil (reparse-symbol indented_block_body) [2536 2575])
                            ("self" variable nil (reparse-symbol indented_block_body) [2583 2599])
                            ("self" variable nil (reparse-symbol indented_block_body) [2608 2625]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2470 2474])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2476 2483])
                            ("data" variable nil (reparse-symbol function_parameters) [2485 2489]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2457 2626])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2639 2643])
                            ("level" variable nil (reparse-symbol function_parameters) [2645 2650]))                          )
                        (reparse-symbol indented_block_body) [2630 3879])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3896 3900]))                          )
                        (reparse-symbol indented_block_body) [3883 3934])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3950 3954]))                          )
                        (reparse-symbol indented_block_body) [3938 3987])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4007 4011])
                            ("index" variable nil (reparse-symbol function_parameters) [4013 4018]))                          )
                        (reparse-symbol indented_block_body) [3991 4050])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4070 4074])
                            ("index" variable nil (reparse-symbol function_parameters) [4076 4081]))                          )
                        (reparse-symbol indented_block_body) [4054 4215])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4235 4239])
                            ("index" variable nil (reparse-symbol function_parameters) [4241 4246])
                            ("code" variable nil (reparse-symbol function_parameters) [4248 4252]))                          )
                        (reparse-symbol indented_block_body) [4219 4287])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4302 4306])
                            ("index" variable nil (reparse-symbol function_parameters) [4308 4313])
                            ("code" variable nil (reparse-symbol function_parameters) [4315 4319]))                          )
                        (reparse-symbol indented_block_body) [4291 4360])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("code" variable nil (reparse-symbol function_parameters) [4381 4385]))                          )
                        (reparse-symbol indented_block_body) [4364 4419])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4436 4440]))                          )
                        (reparse-symbol indented_block_body) [4423 5644]))                  
                :type "class")
                nil [2394 5644])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5702 5722])
                            ("self" variable nil (reparse-symbol indented_block_body) [5731 5745])
                            ("self" code nil (reparse-symbol indented_block_body) [5754 5767]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5679 5683])
                            ("string" variable nil (reparse-symbol function_parameters) [5685 5691]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5666 5768])
                    ("raise" code nil (reparse-symbol indented_block_body) [8037 8083]))                  
                :type "class")
                nil [5645 8084])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [8097 8103])
                ("escape" variable nil (reparse-symbol function_parameters) [8105 8111])
                ("state" variable nil (reparse-symbol function_parameters) [8113 8118]))              ) nil [8085 10034])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [10050 10056])
                ("state" variable nil (reparse-symbol function_parameters) [10058 10063])
                ("nested" variable nil (reparse-symbol function_parameters) [10065 10071]))              ) nil [10035 11660])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11681 11687])
                ("state" variable nil (reparse-symbol function_parameters) [11689 11694])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11696 11705]))              ) nil [11661 12179])
            ("_PATTERNENDERS" variable nil nil [12180 12206])
            ("_ASSERTCHARS" variable nil nil [12207 12232])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [12233 12267])
            ("_REPEATCODES" variable nil nil [12268 12312])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [12325 12331])
                ("state" variable nil (reparse-symbol function_parameters) [12333 12338]))              ) nil [12314 28506])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [28527 28535])
                ("match" variable nil (reparse-symbol function_parameters) [28537 28542]))              ) nil [28507 28912]))          
      :file "sre_parse.py"
      :pointmax 28912
      :fsize 28911
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax '((ASSIGN 28219 . 28220) (INDENT_BLOCK 8020 . 8033) (NEWLINE 8019 . 8020) (COLON 8018 . 8019)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [4904 4909])
                        ("kws" variable nil (reparse-symbol function_parameters) [4911 4916]))                      ) (reparse-symbol indented_block_body) [4889 6150])
                    ("safe_substitute" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [6175 6180])
                        ("kws" variable nil (reparse-symbol function_parameters) [6182 6187]))                      ) (reparse-symbol indented_block_body) [6155 7444]))                  
                :type "class")
                nil [4188 7444])
            ("index_error" variable nil nil [7675 7699])
            ("atoi_error" variable nil nil [7700 7723])
            ("atof_error" variable nil nil [7724 7747])
            ("atol_error" variable nil nil [7748 7771])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7826 7827]))                  )
                nil [7816 7945])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7999 8000]))                  )
                nil [7989 8118])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8173 8174]))                  )
                nil [8160 8344])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8400 8401])
                    ("chars" variable nil (reparse-symbol function_parameters) [8403 8408]))                  )
                nil [8390 8717])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8761 8762])
                    ("chars" variable nil (reparse-symbol function_parameters) [8764 8769]))                  )
                nil [8750 8989])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9034 9035])
                    ("chars" variable nil (reparse-symbol function_parameters) [9037 9042]))                  )
                nil [9023 9263])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9333 9334])
                    ("sep" variable nil (reparse-symbol function_parameters) [9336 9339])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9346 9354]))                  )
                nil [9323 9775])
            ("splitfields" variable nil nil [9775 9794])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9865 9866])
                    ("sep" variable nil (reparse-symbol function_parameters) [9868 9871])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9878 9886]))                  )
                nil [9854 10281])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10329 10334])
                    ("sep" variable nil (reparse-symbol function_parameters) [10336 10339]))                  )
                nil [10320 10600])
            ("joinfields" variable nil nil [10600 10617])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10676 10677])
                    ("args" variable nil (reparse-symbol function_parameters) [10679 10684]))                  )
                nil [10666 10836])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10900 10901])
                    ("args" variable nil (reparse-symbol function_parameters) [10903 10908]))                  )
                nil [10889 11063])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11123 11124])
                    ("args" variable nil (reparse-symbol function_parameters) [11126 11131]))                  )
                nil [11113 11371])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11422 11423])
                    ("args" variable nil (reparse-symbol function_parameters) [11425 11430]))                  )
                nil [11413 11728])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11785 11786])
                    ("args" variable nil (reparse-symbol function_parameters) [11788 11793]))                  )
                nil [11775 12095])
            ("_float" variable nil nil [12117 12131])
            ("_int" variable nil nil [12132 12142])
            ("_long" variable nil nil [12143 12155])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12192 12193]))                  )
                nil [12183 12317])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12356 12357])
                    ("base" variable nil (reparse-symbol function_parameters) [12360 12364]))                  )
                nil [12347 12777])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12821 12822])
                    ("base" variable nil (reparse-symbol function_parameters) [12824 12828]))                  )
                nil [12812 13306])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13342 13343])
                    ("width" variable nil (reparse-symbol function_parameters) [13345 13350])
                    ("args" variable nil (reparse-symbol function_parameters) [13352 13357]))                  )
                nil [13332 13649])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13685 13686])
                    ("width" variable nil (reparse-symbol function_parameters) [13688 13693])
                    ("args" variable nil (reparse-symbol function_parameters) [13695 13700]))                  )
                nil [13675 13993])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14023 14024])
                    ("width" variable nil (reparse-symbol function_parameters) [14026 14031])
                    ("args" variable nil (reparse-symbol function_parameters) [14033 14038]))                  )
                nil [14012 14324])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14536 14537])
                    ("width" variable nil (reparse-symbol function_parameters) [14539 14544]))                  )
                nil [14526 14803])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14918 14919])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14921 14928]))                  )
                nil [14903 15192])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15254 15255])
                    ("table" variable nil (reparse-symbol function_parameters) [15257 15262])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15264 15273]))                  )
                nil [15240 16003])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16073 16074]))                  )
                nil [16058 16225])
            ("replace" function
               (:documentation "replace (str, old, new[, maxreplace]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxreplace is
    given, only the first maxreplace occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16271 16272])
                    ("old" variable nil (reparse-symbol function_parameters) [16274 16277])
                    ("new" variable nil (reparse-symbol function_parameters) [16279 16282])
                    ("maxreplace" variable nil (reparse-symbol function_parameters) [16284 16294]))                  )
                nil [16259 16601])
            ("try" code nil nil [16843 17048])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [17494 17499])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [17501 17509]))                      ) (reparse-symbol indented_block_body) [17483 18182])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18199 18203])
                            ("format_string" variable nil (reparse-symbol function_parameters) [18205 18218])
                            ("args" variable nil (reparse-symbol function_parameters) [18220 18224])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18226 18232]))                          )
                        (reparse-symbol indented_block_body) [18187 18413])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18431 18435])
                            ("format_string" variable nil (reparse-symbol function_parameters) [18437 18450])
                            ("args" variable nil (reparse-symbol function_parameters) [18452 18456])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18458 18464])
                            ("used_args" variable nil (reparse-symbol function_parameters) [18466 18475])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [18477 18492]))                          )
                        (reparse-symbol indented_block_body) [18418 19722])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19742 19746])
                            ("key" variable nil (reparse-symbol function_parameters) [19748 19751])
                            ("args" variable nil (reparse-symbol function_parameters) [19753 19757])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19759 19765]))                          )
                        (reparse-symbol indented_block_body) [19728 19883])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19911 19915])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19917 19926])
                            ("args" variable nil (reparse-symbol function_parameters) [19928 19932])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19934 19940]))                          )
                        (reparse-symbol indented_block_body) [19889 19956])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19979 19983])
                            ("value" variable nil (reparse-symbol function_parameters) [19985 19990])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19992 20003]))                          )
                        (reparse-symbol indented_block_body) [19962 20048])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20072 20076])
                            ("value" variable nil (reparse-symbol function_parameters) [20078 20083])
                            ("conversion" variable nil (reparse-symbol function_parameters) [20085 20095]))                          )
                        (reparse-symbol indented_block_body) [20054 20413])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20788 20792])
                            ("format_string" variable nil (reparse-symbol function_parameters) [20794 20807]))                          )
                        (reparse-symbol indented_block_body) [20778 20859])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21136 21140])
                            ("field_name" variable nil (reparse-symbol function_parameters) [21142 21152])
                            ("args" variable nil (reparse-symbol function_parameters) [21154 21158])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [21160 21166]))                          )
                        (reparse-symbol indented_block_body) [21122 21549]))                  
                :type "class")
                nil [17454 21549]))          
      :file "string.py"
      :pointmax 21549
      :fsize 21548
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
      :file "struct.py"
      :pointmax 83
      :fsize 82
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Locale support module.

The module provides low-level access to the C lib's locale APIs and adds high
level number formatting APIs as well as a locale aliasing engine to complement
these.

The aliasing engine includes support for many commonly used locale names and
maps them to values suitable for passing to the C lib's setlocale() function. It
also includes default encodings for all supported locale names.
\"\"\"" code nil nil [1 418])
            ("sys" include nil nil [420 430])
            ("encodings" include nil nil [431 447])
            ("encodings.aliases" include nil nil [448 472])
            ("re" include nil nil [473 482])
            ("operator" include nil nil [483 498])
            ("functools" include nil nil [499 515])
            ("_str" variable nil nil [622 632])
            ("try" code nil nil [634 820])
            ("__all__" variable nil nil [1068 1415])
            ("try" code nil nil [1417 3119])
            ("_localeconv" variable nil nil [3121 3145])
            ("_override_localeconv" variable nil nil [3262 3287])
            ("" code nil nil [3305 3318])
            ("localeconv" function nil nil [3319 3440])
            ("_grouping_intervals" function (:arguments 
              ( ("grouping" variable nil (reparse-symbol function_parameters) [3584 3592]))              ) nil [3560 4020])
            ("_group" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [4073 4074])
                ("monetary" variable nil (reparse-symbol function_parameters) [4076 4084]))              ) nil [4062 4962])
            ("_strip_padding" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [5045 5046])
                ("amount" variable nil (reparse-symbol function_parameters) [5048 5054]))              ) nil [5026 5268])
            ("_percent_re" variable nil nil [5269 5398])
            ("format" function
               (:documentation "Returns the locale-aware substitution of a %? specifier
    (percent).

    additional is for format strings which contain one or more
    '*' modifiers."
                :arguments 
                  ( ("percent" variable nil (reparse-symbol function_parameters) [5411 5418])
                    ("value" variable nil (reparse-symbol function_parameters) [5420 5425])
                    ("grouping" variable nil (reparse-symbol function_parameters) [5427 5435])
                    ("monetary" variable nil (reparse-symbol function_parameters) [5443 5451])
                    ("additional" variable nil (reparse-symbol function_parameters) [5459 5470]))                  )
                nil [5400 6026])
            ("_format" function (:arguments 
              ( ("percent" variable nil (reparse-symbol function_parameters) [6039 6046])
                ("value" variable nil (reparse-symbol function_parameters) [6048 6053])
                ("grouping" variable nil (reparse-symbol function_parameters) [6055 6063])
                ("monetary" variable nil (reparse-symbol function_parameters) [6071 6079])
                ("additional" variable nil (reparse-symbol function_parameters) [6087 6098]))              ) nil [6027 6928])
            ("format_string" function
               (:documentation "Formats a string in the same way that the % formatting would use,
    but takes the current locale into account.
    Grouping is applied if the third parameter is true."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6947 6948])
                    ("val" variable nil (reparse-symbol function_parameters) [6950 6953])
                    ("grouping" variable nil (reparse-symbol function_parameters) [6955 6963]))                  )
                nil [6929 8117])
            ("currency" function
               (:documentation "Formats val according to the currency settings
    in the current locale."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [8131 8134])
                    ("symbol" variable nil (reparse-symbol function_parameters) [8136 8142])
                    ("grouping" variable nil (reparse-symbol function_parameters) [8149 8157])
                    ("international" variable nil (reparse-symbol function_parameters) [8165 8178]))                  )
                nil [8118 9644])
            ("str" function
               (:documentation "Convert float to string, taking the locale into account."
                :arguments 
                  ( ("val" variable nil (reparse-symbol function_parameters) [9653 9656]))                  )
                nil [9645 9758])
            ("atof" function (:arguments 
              ( ("string" variable nil (reparse-symbol function_parameters) [9768 9774])
                ("func" variable nil (reparse-symbol function_parameters) [9776 9780]))              ) nil [9759 10176])
            ("atoi" function (:arguments 
              ( ("str" variable nil (reparse-symbol function_parameters) [10186 10189]))              ) nil [10177 10290])
            ("_test" function nil nil [10291 10484])
            ("_setlocale" variable nil nil [10698 10720])
            ("_ascii_lower_map" variable nil nil [10799 10910])
            ("_replace_encoding" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [10934 10938])
                ("encoding" variable nil (reparse-symbol function_parameters) [10940 10948]))              ) nil [10912 11592])
            ("normalize" function
               (:documentation " Returns a normalized locale code for the given locale
        name.

        The returned locale code is formatted for use with
        setlocale().

        If normalization fails, the original name is returned
        unchanged.

        If the given encoding is not known, the function defaults to
        the default encoding for the locale code just like setlocale()
        does.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [11607 11617]))                  )
                nil [11593 14580])
            ("_parse_localename" function
               (:documentation " Parses the locale code for localename and returns the
        result as tuple (language code, encoding).

        The localename is normalized and passed through the locale
        alias engine. A ValueError is raised in case the locale name
        cannot be parsed.

        The language code corresponds to RFC 1766.  code and encoding
        can be None in case the values cannot be determined or are
        unknown to this implementation.

    "
                :arguments 
                  ( ("localename" variable nil (reparse-symbol function_parameters) [14603 14613]))                  )
                nil [14581 15657])
            ("_build_localename" function
               (:documentation " Builds a locale code from the given tuple (language code,
        encoding).

        No aliasing or normalizing takes place.

    "
                :arguments 
                  ( ("localetuple" variable nil (reparse-symbol function_parameters) [15680 15691]))                  )
                nil [15658 16023])
            ("getdefaultlocale" function
               (:documentation " Tries to determine the default locale settings and returns
        them as tuple (language code, encoding).

        According to POSIX, a program which has not called
        setlocale(LC_ALL, \"\") runs using the portable 'C' locale.
        Calling setlocale(LC_ALL, \"\") lets it use the default locale as
        defined by the LANG variable. Since we don't want to interfere
        with the current locale setting we thus emulate the behavior
        in the way described above.

        To maintain compatibility with other platforms, not only the
        LANG variable is tested, but a list of variables given as
        envvars parameter. The first found to be defined will be
        used. envvars defaults to the search path used in GNU gettext;
        it must always contain the variable name 'LANG'.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("envvars" variable nil (reparse-symbol function_parameters) [16045 16052]))                  )
                nil [16024 18009])
            ("getlocale" function
               (:documentation " Returns the current setting for the given locale category as
        tuple (language code, encoding).

        category may be one of the LC_* value except LC_ALL. It
        defaults to LC_CTYPE.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [18025 18033]))                  )
                nil [18011 18613])
            ("setlocale" function
               (:documentation " Set the locale for the given category.  The locale can be
        a string, an iterable of two strings (language code and encoding),
        or None.

        Iterables are converted to strings using the locale aliasing
        engine.  Locale strings are passed directly to the C lib.

        category may be given as one of the LC_* values.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [18628 18636])
                    ("locale" variable nil (reparse-symbol function_parameters) [18638 18644]))                  )
                nil [18614 19196])
            ("resetlocale" function
               (:documentation " Sets the locale for category to the default setting.

        The default setting is determined by calling
        getdefaultlocale(). category defaults to LC_ALL.

    "
                :arguments 
                  ( ("category" variable nil (reparse-symbol function_parameters) [19213 19221]))                  )
                nil [19197 19477])
            ("if" code nil nil [19478 20682])
            ("locale_encoding_alias" variable nil nil [21243 22975])
            ("locale_alias" variable nil nil [28639 88952])
            ("windows_locale" variable nil nil [89426 97585])
            ("_print_locale" function (:documentation " Test function.
    ") nil [97587 99275])
            ("try" code nil nil [99281 99369])
            ("if" code nil nil [99370 99517]))          
      :file "locale.py"
      :pointmax 99517
      :fsize 99516
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
      :file "abc.py"
      :pointmax 7146
      :fsize 7145
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"A more or less complete user-defined wrapper around dictionary objects.\"\"\"" code nil nil [1 78])
            ("UserDict" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [139 275])
                            ("self" variable nil (reparse-symbol indented_block_body) [283 297])
                            ("args" variable nil (reparse-symbol indented_block_body) [306 321])
                            ("if" code nil (reparse-symbol indented_block_body) [330 428])
                            ("if" code nil (reparse-symbol indented_block_body) [436 781])
                            ("self" variable nil (reparse-symbol indented_block_body) [789 803])
                            ("if" code nil (reparse-symbol indented_block_body) [812 863])
                            ("if" code nil (reparse-symbol indented_block_body) [871 919]))                          
                        :arguments 
                          ( ("args" variable nil (reparse-symbol function_parameters) [113 118])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [120 128]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [100 919])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [936 940]))                          )
                        (reparse-symbol indented_block_body) [923 966])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [982 986])
                            ("dict" variable nil (reparse-symbol function_parameters) [988 992]))                          )
                        (reparse-symbol indented_block_body) [970 1133])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [1137 1152])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1190 1194]))                          )
                        (reparse-symbol indented_block_body) [1178 1219])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1239 1243])
                            ("key" variable nil (reparse-symbol function_parameters) [1245 1248]))                          )
                        (reparse-symbol indented_block_body) [1223 1450])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1470 1474])
                            ("key" variable nil (reparse-symbol function_parameters) [1476 1479])
                            ("item" variable nil (reparse-symbol function_parameters) [1481 1485]))                          )
                        (reparse-symbol indented_block_body) [1454 1510])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1530 1534])
                            ("key" variable nil (reparse-symbol function_parameters) [1536 1539]))                          )
                        (reparse-symbol indented_block_body) [1514 1561])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1575 1579]))                          )
                        (reparse-symbol indented_block_body) [1565 1600])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1613 1617]))                          )
                        (reparse-symbol indented_block_body) [1604 1908])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1921 1925]))                          )
                        (reparse-symbol indented_block_body) [1912 1952])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1966 1970]))                          )
                        (reparse-symbol indented_block_body) [1956 1998])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2016 2020]))                          )
                        (reparse-symbol indented_block_body) [2002 2052])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2069 2073]))                          )
                        (reparse-symbol indented_block_body) [2056 2104])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2123 2127]))                          )
                        (reparse-symbol indented_block_body) [2108 2160])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2175 2179]))                          )
                        (reparse-symbol indented_block_body) [2164 2208])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2224 2228])
                            ("key" variable nil (reparse-symbol function_parameters) [2230 2233]))                          )
                        (reparse-symbol indented_block_body) [2212 2260])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [2275 2280])
                        ("kwargs" variable nil (reparse-symbol function_parameters) [2282 2290]))                      ) (reparse-symbol indented_block_body) [2264 3282])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3294 3298])
                            ("key" variable nil (reparse-symbol function_parameters) [3300 3303])
                            ("failobj" variable nil (reparse-symbol function_parameters) [3305 3312]))                          )
                        (reparse-symbol indented_block_body) [3286 3400])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3419 3423])
                            ("key" variable nil (reparse-symbol function_parameters) [3425 3428])
                            ("failobj" variable nil (reparse-symbol function_parameters) [3430 3437]))                          )
                        (reparse-symbol indented_block_body) [3404 3530])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3542 3546])
                            ("key" variable nil (reparse-symbol function_parameters) [3548 3551])
                            ("args" variable nil (reparse-symbol function_parameters) [3553 3558]))                          )
                        (reparse-symbol indented_block_body) [3534 3602])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3618 3622]))                          )
                        (reparse-symbol indented_block_body) [3606 3660])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3681 3685])
                            ("key" variable nil (reparse-symbol function_parameters) [3687 3690]))                          )
                        (reparse-symbol indented_block_body) [3664 3725])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3759 3762])
                            ("iterable" variable nil (reparse-symbol function_parameters) [3764 3772])
                            ("value" variable nil (reparse-symbol function_parameters) [3774 3779]))                          )
                        (reparse-symbol indented_block_body) [3729 3878]))                  
                :type "class")
                nil [80 3878])
            ("IterableUserDict" type
               (:superclasses ("UserDict")
                :members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3930 3934]))                          )
                        (reparse-symbol indented_block_body) [3917 3968]))                  
                :type "class")
                nil [3879 3968])
            ("_abcoll" include nil nil [3969 3983])
            ("_abcoll" code nil nil [3984 4033])
            ("DictMixin" type
               (:members 
                  ( ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4535 4539]))                          )
                        (reparse-symbol indented_block_body) [4522 4592])
                    ("has_key" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4608 4612])
                            ("key" variable nil (reparse-symbol function_parameters) [4614 4617]))                          )
                        (reparse-symbol indented_block_body) [4596 4725])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4746 4750])
                            ("key" variable nil (reparse-symbol function_parameters) [4752 4755]))                          )
                        (reparse-symbol indented_block_body) [4729 4791])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4872 4876]))                          )
                        (reparse-symbol indented_block_body) [4858 4933])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4950 4954]))                          )
                        (reparse-symbol indented_block_body) [4937 4988])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5062 5066]))                          )
                        (reparse-symbol indented_block_body) [5047 5127])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5142 5146]))                          )
                        (reparse-symbol indented_block_body) [5131 5197])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5211 5215]))                          )
                        (reparse-symbol indented_block_body) [5201 5256])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5270 5274]))                          )
                        (reparse-symbol indented_block_body) [5260 5335])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5354 5358])
                            ("key" variable nil (reparse-symbol function_parameters) [5360 5363])
                            ("default" variable nil (reparse-symbol function_parameters) [5365 5372]))                          )
                        (reparse-symbol indented_block_body) [5339 5502])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5514 5518])
                            ("key" variable nil (reparse-symbol function_parameters) [5520 5523])
                            ("args" variable nil (reparse-symbol function_parameters) [5525 5530]))                          )
                        (reparse-symbol indented_block_body) [5506 5863])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5879 5883]))                          )
                        (reparse-symbol indented_block_body) [5867 6063])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6078 6082])
                            ("other" variable nil (reparse-symbol function_parameters) [6084 6089])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [6096 6104]))                          )
                        (reparse-symbol indented_block_body) [6067 6594])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6606 6610])
                            ("key" variable nil (reparse-symbol function_parameters) [6612 6615])
                            ("default" variable nil (reparse-symbol function_parameters) [6617 6624]))                          )
                        (reparse-symbol indented_block_body) [6598 6726])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6743 6747]))                          )
                        (reparse-symbol indented_block_body) [6730 6794])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6810 6814])
                            ("other" variable nil (reparse-symbol function_parameters) [6816 6821]))                          )
                        (reparse-symbol indented_block_body) [6798 7006])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7022 7026]))                          )
                        (reparse-symbol indented_block_body) [7010 7061]))                  
                :type "class")
                nil [4036 7061]))          
      :file "UserDict.py"
      :pointmax 7061
      :fsize 7060
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1965])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1982 1986]))                          )
                        (reparse-symbol indented_block_body) [1970 2049])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2071 2075])
                            ("item" variable nil (reparse-symbol function_parameters) [2077 2081]))                          )
                        (reparse-symbol indented_block_body) [2054 2206])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2226 2230]))                          )
                        (reparse-symbol indented_block_body) [2211 2329])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2334 2349])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2363 2367])
                            ("item" variable nil (reparse-symbol function_parameters) [2369 2373]))                          )
                        (reparse-symbol indented_block_body) [2355 2494])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2509 2513]))                          )
                        (reparse-symbol indented_block_body) [2499 2613])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2627 2631]))                          )
                        (reparse-symbol indented_block_body) [2618 2670])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2683 2687]))                          )
                        (reparse-symbol indented_block_body) [2675 3016])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3032 3036])
                            ("item" variable nil (reparse-symbol function_parameters) [3038 3042]))                          )
                        (reparse-symbol indented_block_body) [3021 3152])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3169 3173])
                            ("item" variable nil (reparse-symbol function_parameters) [3175 3179]))                          )
                        (reparse-symbol indented_block_body) [3157 3290])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3306 3310])
                            ("other" variable nil (reparse-symbol function_parameters) [3312 3317]))                          )
                        (reparse-symbol indented_block_body) [3295 3451])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3468 3472])
                            ("other" variable nil (reparse-symbol function_parameters) [3474 3479]))                          )
                        (reparse-symbol indented_block_body) [3456 3529])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3549 3553])
                            ("other" variable nil (reparse-symbol function_parameters) [3555 3560]))                          )
                        (reparse-symbol indented_block_body) [3534 3654])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3658 3678])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3706 3710])
                            ("other" variable nil (reparse-symbol function_parameters) [3712 3717]))                          )
                        (reparse-symbol indented_block_body) [3684 3749])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3766 3770])
                            ("other" variable nil (reparse-symbol function_parameters) [3772 3777]))                          )
                        (reparse-symbol indented_block_body) [3753 4010])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4032 4036])
                            ("other" variable nil (reparse-symbol function_parameters) [4038 4043]))                          )
                        (reparse-symbol indented_block_body) [4015 4116])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [4120 4142])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4172 4176])
                            ("other" variable nil (reparse-symbol function_parameters) [4178 4183]))                          )
                        (reparse-symbol indented_block_body) [4148 4215])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4232 4236])
                            ("other" variable nil (reparse-symbol function_parameters) [4238 4243]))                          )
                        (reparse-symbol indented_block_body) [4219 4404])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4422 4426])
                            ("other" variable nil (reparse-symbol function_parameters) [4428 4433]))                          )
                        (reparse-symbol indented_block_body) [4409 4499])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4503 4520])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4537 4541])
                            ("other" variable nil (reparse-symbol function_parameters) [4543 4548]))                          )
                        (reparse-symbol indented_block_body) [4526 4611])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4631 4635])
                            ("other" variable nil (reparse-symbol function_parameters) [4637 4642]))                          )
                        (reparse-symbol indented_block_body) [4616 4710])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4714 4733])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4750 4754])
                            ("other" variable nil (reparse-symbol function_parameters) [4756 4761]))                          )
                        (reparse-symbol indented_block_body) [4739 4824])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4840 4844])
                            ("other" variable nil (reparse-symbol function_parameters) [4846 4851]))                          )
                        (reparse-symbol indented_block_body) [4829 4999])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5015 5019])
                            ("other" variable nil (reparse-symbol function_parameters) [5021 5026]))                          )
                        (reparse-symbol indented_block_body) [5004 5168])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5198 5202])
                            ("other" variable nil (reparse-symbol function_parameters) [5204 5209]))                          )
                        (reparse-symbol indented_block_body) [5173 5313])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5317 5347])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5385 5389])
                            ("other" variable nil (reparse-symbol function_parameters) [5391 5396]))                          )
                        (reparse-symbol indented_block_body) [5353 5428])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5445 5449])
                            ("other" variable nil (reparse-symbol function_parameters) [5451 5456]))                          )
                        (reparse-symbol indented_block_body) [5432 5713])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5728 5732])
                            ("other" variable nil (reparse-symbol function_parameters) [5734 5739]))                          )
                        (reparse-symbol indented_block_body) [5718 5809])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5813 5827])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5848 5852])
                            ("other" variable nil (reparse-symbol function_parameters) [5854 5859]))                          )
                        (reparse-symbol indented_block_body) [5833 5912]))                  
                :type "class")
                nil [933 5912]))          
      :file "_weakrefset.py"
      :pointmax 5912
      :fsize 5911
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("try" code nil nil [399 510])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [617 621]))                  
                :type "class")
                nil [589 622])
            ("FAILURE" variable nil nil [636 655])
            ("SUCCESS" variable nil nil [656 675])
            ("ANY" variable nil nil [677 688])
            ("ANY_ALL" variable nil nil [689 708])
            ("ASSERT" variable nil nil [709 726])
            ("ASSERT_NOT" variable nil nil [727 752])
            ("AT" variable nil nil [753 762])
            ("BIGCHARSET" variable nil nil [763 788])
            ("BRANCH" variable nil nil [789 806])
            ("CALL" variable nil nil [807 820])
            ("CATEGORY" variable nil nil [821 842])
            ("CHARSET" variable nil nil [843 862])
            ("GROUPREF" variable nil nil [863 884])
            ("GROUPREF_IGNORE" variable nil nil [885 920])
            ("GROUPREF_EXISTS" variable nil nil [921 956])
            ("IN" variable nil nil [957 966])
            ("IN_IGNORE" variable nil nil [967 990])
            ("INFO" variable nil nil [991 1004])
            ("JUMP" variable nil nil [1005 1018])
            ("LITERAL" variable nil nil [1019 1038])
            ("LITERAL_IGNORE" variable nil nil [1039 1072])
            ("MARK" variable nil nil [1073 1086])
            ("MAX_REPEAT" variable nil nil [1087 1112])
            ("MAX_UNTIL" variable nil nil [1113 1136])
            ("MIN_REPEAT" variable nil nil [1137 1162])
            ("MIN_UNTIL" variable nil nil [1163 1186])
            ("NEGATE" variable nil nil [1187 1204])
            ("NOT_LITERAL" variable nil nil [1205 1232])
            ("NOT_LITERAL_IGNORE" variable nil nil [1233 1274])
            ("RANGE" variable nil nil [1275 1290])
            ("REPEAT" variable nil nil [1291 1308])
            ("REPEAT_ONE" variable nil nil [1309 1334])
            ("SUBPATTERN" variable nil nil [1335 1360])
            ("MIN_REPEAT_ONE" variable nil nil [1361 1394])
            ("AT_BEGINNING" variable nil nil [1408 1437])
            ("AT_BEGINNING_LINE" variable nil nil [1438 1477])
            ("AT_BEGINNING_STRING" variable nil nil [1478 1521])
            ("AT_BOUNDARY" variable nil nil [1522 1549])
            ("AT_NON_BOUNDARY" variable nil nil [1550 1585])
            ("AT_END" variable nil nil [1586 1603])
            ("AT_END_LINE" variable nil nil [1604 1631])
            ("AT_END_STRING" variable nil nil [1632 1663])
            ("AT_LOC_BOUNDARY" variable nil nil [1664 1699])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1700 1743])
            ("AT_UNI_BOUNDARY" variable nil nil [1744 1779])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1780 1823])
            ("CATEGORY_DIGIT" variable nil nil [1838 1871])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1872 1913])
            ("CATEGORY_SPACE" variable nil nil [1914 1947])
            ("CATEGORY_NOT_SPACE" variable nil nil [1948 1989])
            ("CATEGORY_WORD" variable nil nil [1990 2021])
            ("CATEGORY_NOT_WORD" variable nil nil [2022 2061])
            ("CATEGORY_LINEBREAK" variable nil nil [2062 2103])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2104 2153])
            ("CATEGORY_LOC_WORD" variable nil nil [2154 2193])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2194 2241])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2242 2283])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2284 2333])
            ("CATEGORY_UNI_SPACE" variable nil nil [2334 2375])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2376 2425])
            ("CATEGORY_UNI_WORD" variable nil nil [2426 2465])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2466 2513])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2514 2563])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2564 2621])
            ("OPCODES" variable nil nil [2623 3120])
            ("ATCODES" variable nil nil [3122 3346])
            ("CHCODES" variable nil nil [3348 3762])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3777 3781]))              ) nil [3764 3878])
            ("OPCODES" variable nil nil [3879 3906])
            ("ATCODES" variable nil nil [3907 3934])
            ("CHCODES" variable nil nil [3935 3962])
            ("OP_IGNORE" variable nil nil [4012 4142])
            ("AT_MULTILINE" variable nil nil [4144 4223])
            ("AT_LOCALE" variable nil nil [4225 4315])
            ("AT_UNICODE" variable nil nil [4317 4408])
            ("CH_LOCALE" variable nil nil [4410 4764])
            ("CH_UNICODE" variable nil nil [4766 5145])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5155 5176])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5216 5239])
            ("SRE_FLAG_LOCALE" variable nil nil [5259 5278])
            ("SRE_FLAG_MULTILINE" variable nil nil [5302 5324])
            ("SRE_FLAG_DOTALL" variable nil nil [5360 5380])
            ("SRE_FLAG_UNICODE" variable nil nil [5415 5436])
            ("SRE_FLAG_VERBOSE" variable nil nil [5458 5479])
            ("SRE_FLAG_DEBUG" variable nil nil [5513 5533])
            ("SRE_INFO_PREFIX" variable nil nil [5574 5593])
            ("SRE_INFO_LITERAL" variable nil nil [5607 5627])
            ("SRE_INFO_CHARSET" variable nil nil [5674 5694])
            ("if" code nil nil [5743 7198]))          
      :file "sre_constants.py"
      :pointmax 7198
      :fsize 7197
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 3689])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [3705 3710]))                  )
                nil [3690 4479]))          
      :file "functools.py"
      :pointmax 4479
      :fsize 4478
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

\"\"\"" code nil nil [1 158])
            ("os" include nil nil [160 169])
            ("sys" include nil nil [170 180])
            ("stat" include nil nil [181 192])
            ("os.path" include nil nil [193 220])
            ("fnmatch" include nil nil [221 235])
            ("collections" include nil nil [236 254])
            ("errno" include nil nil [255 267])
            ("try" code nil nil [269 343])
            ("try" code nil nil [344 418])
            ("__all__" variable nil nil [419 727])
            ("Error" type
               (:superclasses ("EnvironmentError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [764 768]))                  
                :type "class")
                nil [729 769])
            ("SpecialFileError" type
               (:documentation "Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [770 947])
            ("ExecError" type
               (:documentation "Raised when a command could not be executed"
                :superclasses ("EnvironmentError")
                :type "class")
                nil [948 1037])
            ("try" code nil nil [1038 1102])
            ("copyfileobj" function
               (:documentation "copy data from file-like object fsrc to file-like object fdst"
                :arguments 
                  ( ("fsrc" variable nil (reparse-symbol function_parameters) [1119 1123])
                    ("fdst" variable nil (reparse-symbol function_parameters) [1125 1129])
                    ("length" variable nil (reparse-symbol function_parameters) [1131 1137]))                  )
                nil [1103 1327])
            ("_samefile" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [1342 1345])
                ("dst" variable nil (reparse-symbol function_parameters) [1347 1350]))              ) nil [1328 1680])
            ("copyfile" function
               (:documentation "Copy data from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [1694 1697])
                    ("dst" variable nil (reparse-symbol function_parameters) [1699 1702]))                  )
                nil [1681 2298])
            ("copymode" function
               (:documentation "Copy mode bits from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2312 2315])
                    ("dst" variable nil (reparse-symbol function_parameters) [2317 2320]))                  )
                nil [2299 2487])
            ("copystat" function
               (:documentation "Copy all stat info (mode bits, atime, mtime, flags) from src to dst"
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [2501 2504])
                    ("dst" variable nil (reparse-symbol function_parameters) [2506 2509]))                  )
                nil [2488 3117])
            ("copy" function
               (:documentation "Copy data and mode bits (\"cp src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3127 3130])
                    ("dst" variable nil (reparse-symbol function_parameters) [3132 3135]))                  )
                nil [3118 3363])
            ("copy2" function
               (:documentation "Copy data and all stat info (\"cp -p src dst\").

    The destination may be a directory.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [3374 3377])
                    ("dst" variable nil (reparse-symbol function_parameters) [3379 3382]))                  )
                nil [3364 3617])
            ("ignore_patterns" function
               (:documentation "Function that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude files"
                :arguments 
                  ( ("patterns" variable nil (reparse-symbol function_parameters) [3638 3647]))                  )
                nil [3618 4030])
            ("copytree" function
               (:documentation "Recursively copy a directory tree using copy2().

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    XXX Consider this example code rather than the ultimate tool.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [4044 4047])
                    ("dst" variable nil (reparse-symbol function_parameters) [4049 4052])
                    ("symlinks" variable nil (reparse-symbol function_parameters) [4054 4062])
                    ("ignore" variable nil (reparse-symbol function_parameters) [4070 4076]))                  )
                nil [4031 6370])
            ("rmtree" function
               (:documentation "Recursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [6382 6386])
                    ("ignore_errors" variable nil (reparse-symbol function_parameters) [6388 6401])
                    ("onerror" variable nil (reparse-symbol function_parameters) [6409 6416]))                  )
                nil [6371 7994])
            ("_basename" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [8010 8014]))              ) nil [7996 8267])
            ("move" function
               (:documentation "Recursively move a file or directory to another location. This is
    similar to the Unix \"mv\" command.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed.
    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    "
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [8277 8280])
                    ("dst" variable nil (reparse-symbol function_parameters) [8282 8285]))                  )
                nil [8268 9724])
            ("_destinsrc" function (:arguments 
              ( ("src" variable nil (reparse-symbol function_parameters) [9740 9743])
                ("dst" variable nil (reparse-symbol function_parameters) [9745 9748]))              ) nil [9725 9958])
            ("_get_gid" function
               (:documentation "Returns a gid, given a group name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [9972 9976]))                  )
                nil [9959 10237])
            ("_get_uid" function
               (:documentation "Returns an uid, given a user name."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [10251 10255]))                  )
                nil [10238 10516])
            ("_make_tarball" function
               (:documentation "Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be \"gzip\" (the default), \"bzip2\", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  \".tar\", possibly plus
    the appropriate compression extension (\".gz\", or \".bz2\").

    Returns the output filename.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [10535 10544])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [10546 10554])
                    ("compress" variable nil (reparse-symbol function_parameters) [10556 10564])
                    ("verbose" variable nil (reparse-symbol function_parameters) [10573 10580])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [10584 10591])
                    ("owner" variable nil (reparse-symbol function_parameters) [10613 10618])
                    ("group" variable nil (reparse-symbol function_parameters) [10625 10630])
                    ("logger" variable nil (reparse-symbol function_parameters) [10637 10643]))                  )
                nil [10517 12535])
            ("_call_external_zip" function (:arguments 
              ( ("base_dir" variable nil (reparse-symbol function_parameters) [12559 12567])
                ("zip_filename" variable nil (reparse-symbol function_parameters) [12569 12581])
                ("verbose" variable nil (reparse-symbol function_parameters) [12583 12590])
                ("dry_run" variable nil (reparse-symbol function_parameters) [12598 12605]))              ) nil [12536 13265])
            ("_make_zipfile" function
               (:documentation "Create a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + \".zip\".  Uses either the
    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility
    (if installed and found on the default search path).  If neither tool is
    available, raises ExecError.  Returns the name of the output zip
    file.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [13284 13293])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [13295 13303])
                    ("verbose" variable nil (reparse-symbol function_parameters) [13305 13312])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [13316 13323])
                    ("logger" variable nil (reparse-symbol function_parameters) [13327 13333]))                  )
                nil [13266 15455])
            ("_ARCHIVE_FORMATS" variable nil nil [15456 15753])
            ("get_archive_formats" function (:documentation "Returns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    ") nil [15755 16074])
            ("register_archive_format" function
               (:documentation "Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [16103 16107])
                    ("function" variable nil (reparse-symbol function_parameters) [16109 16117])
                    ("extra_args" variable nil (reparse-symbol function_parameters) [16119 16129])
                    ("description" variable nil (reparse-symbol function_parameters) [16136 16147]))                  )
                nil [16075 17066])
            ("unregister_archive_format" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [17097 17101]))              ) nil [17067 17135])
            ("make_archive" function
               (:documentation "Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"bztar\"
    or \"gztar\".

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    "
                :arguments 
                  ( ("base_name" variable nil (reparse-symbol function_parameters) [17153 17162])
                    ("format" variable nil (reparse-symbol function_parameters) [17164 17170])
                    ("root_dir" variable nil (reparse-symbol function_parameters) [17172 17180])
                    ("base_dir" variable nil (reparse-symbol function_parameters) [17187 17195])
                    ("verbose" variable nil (reparse-symbol function_parameters) [17202 17209])
                    ("dry_run" variable nil (reparse-symbol function_parameters) [17230 17237])
                    ("owner" variable nil (reparse-symbol function_parameters) [17241 17246])
                    ("group" variable nil (reparse-symbol function_parameters) [17253 17258])
                    ("logger" variable nil (reparse-symbol function_parameters) [17265 17271]))                  )
                nil [17136 18973]))          
      :file "shutil.py"
      :pointmax 18973
      :fsize 18972
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("UF_COMPRESSED" variable nil nil [1589 1615])
            ("UF_HIDDEN" variable nil nil [1648 1673])
            ("SF_ARCHIVED" variable nil nil [1713 1738])
            ("SF_IMMUTABLE" variable nil nil [1739 1764])
            ("SF_APPEND" variable nil nil [1765 1790])
            ("SF_NOUNLINK" variable nil nil [1791 1816])
            ("SF_SNAPSHOT" variable nil nil [1817 1842]))          
      :file "stat.py"
      :pointmax 1843
      :fsize 1842
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
\"\"\"" code nil nil [1 426])
            ("re" include nil nil [428 437])
            ("__all__" variable nil nil [439 498])
            ("_cache" variable nil nil [500 511])
            ("_MAXCACHE" variable nil nil [512 527])
            ("_purge" function (:documentation "Clear the pattern cache") nil [529 596])
            ("fnmatch" function
               (:documentation "Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [609 613])
                    ("pat" variable nil (reparse-symbol function_parameters) [615 618]))                  )
                nil [597 1192])
            ("filter" function
               (:documentation "Return the subset of the list NAMES that match PAT"
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [1204 1209])
                    ("pat" variable nil (reparse-symbol function_parameters) [1211 1214]))                  )
                nil [1193 1895])
            ("fnmatchcase" function
               (:documentation "Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [1912 1916])
                    ("pat" variable nil (reparse-symbol function_parameters) [1918 1921]))                  )
                nil [1896 2320])
            ("translate" function
               (:documentation "Translate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    "
                :arguments 
                  ( ("pat" variable nil (reparse-symbol function_parameters) [2335 2338]))                  )
                nil [2321 3316]))          
      :file "fnmatch.py"
      :pointmax 3316
      :fsize 3315
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("r\"\"\"subprocess - Subprocesses with accessible I/O streams

This module allows you to spawn processes, connect to their
input/output/error pipes, and obtain their return codes.  This module
intends to replace several older modules and functions:

os.system
os.spawn*
os.popen*
popen2.*
commands.*

Information about how the subprocess module can be used to replace these
modules and functions can be found below.



Using the subprocess module
===========================
This module defines one class called Popen:

class Popen(args, bufsize=0, executable=None,
            stdin=None, stdout=None, stderr=None,
            preexec_fn=None, close_fds=False, shell=False,
            cwd=None, env=None, universal_newlines=False,
            startupinfo=None, creationflags=0):


Arguments are:

args should be a string, or a sequence of program arguments.  The
program to execute is normally the first item in the args sequence or
string, but can be explicitly set by using the executable argument.

On UNIX, with shell=False (default): In this case, the Popen class
uses os.execvp() to execute the child program.  args should normally
be a sequence.  A string will be treated as a sequence with the string
as the only item (the program to execute).

On UNIX, with shell=True: If args is a string, it specifies the
command string to execute through the shell.  If args is a sequence,
the first item specifies the command string, and any additional items
will be treated as additional shell arguments.

On Windows: the Popen class uses CreateProcess() to execute the child
program, which operates on strings.  If args is a sequence, it will be
converted to a string using the list2cmdline method.  Please note that
not all MS Windows applications interpret the command line the same
way: The list2cmdline is designed for applications using the same
rules as the MS C runtime.

bufsize, if given, has the same meaning as the corresponding argument
to the built-in open() function: 0 means unbuffered, 1 means line
buffered, any other positive value means use a buffer of
(approximately) that size.  A negative bufsize means to use the system
default, which usually means fully buffered.  The default value for
bufsize is 0 (unbuffered).

stdin, stdout and stderr specify the executed programs' standard
input, standard output and standard error file handles, respectively.
Valid values are PIPE, an existing file descriptor (a positive
integer), an existing file object, and None.  PIPE indicates that a
new pipe to the child should be created.  With None, no redirection
will occur; the child's file handles will be inherited from the
parent.  Additionally, stderr can be STDOUT, which indicates that the
stderr data from the applications should be captured into the same
file handle as for stdout.

If preexec_fn is set to a callable object, this object will be called
in the child process just before the child is executed.

If close_fds is true, all file descriptors except 0, 1 and 2 will be
closed before the child process is executed.

if shell is true, the specified command will be executed through the
shell.

If cwd is not None, the current directory will be changed to cwd
before the child is executed.

If env is not None, it defines the environment variables for the new
process.

If universal_newlines is true, the file objects stdout and stderr are
opened as a text files, but lines may be terminated by any of '\\n',
the Unix end-of-line convention, '\\r', the Macintosh convention or
'\\r\\n', the Windows convention.  All of these external representations
are seen as '\\n' by the Python program.  Note: This feature is only
available if Python is built with universal newline support (the
default).  Also, the newlines attribute of the file objects stdout,
stdin and stderr are not updated by the communicate() method.

The startupinfo and creationflags, if given, will be passed to the
underlying CreateProcess() function.  They can specify things such as
appearance of the main window and priority for the new process.
(Windows only)


This module also defines some shortcut functions:

call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete, then
    return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])

check_call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete.  If the
    exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    check_call([\"ls\", \"-l\"])

check_output(*popenargs, **kwargs):
    Run command with arguments and return its output as a byte string.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute and output in the output attribute.

    The arguments are the same as for the Popen constructor.  Example:

    output = check_output([\"ls\", \"-l\", \"/dev/null\"])


Exceptions
----------
Exceptions raised in the child process, before the new program has
started to execute, will be re-raised in the parent.  Additionally,
the exception object will have one extra attribute called
'child_traceback', which is a string containing traceback information
from the child's point of view.

The most common exception raised is OSError.  This occurs, for
example, when trying to execute a non-existent file.  Applications
should prepare for OSErrors.

A ValueError will be raised if Popen is called with invalid arguments.

check_call() and check_output() will raise CalledProcessError, if the
called process returns a non-zero return code.


Security
--------
Unlike some other popen functions, this implementation will never call
/bin/sh implicitly.  This means that all characters, including shell
metacharacters, can safely be passed to child processes.


Popen objects
=============
Instances of the Popen class have the following methods:

poll()
    Check if child process has terminated.  Returns returncode
    attribute.

wait()
    Wait for child process to terminate.  Returns returncode attribute.

communicate(input=None)
    Interact with process: Send data to stdin.  Read data from stdout
    and stderr, until end-of-file is reached.  Wait for process to
    terminate.  The optional input argument should be a string to be
    sent to the child process, or None, if no data should be sent to
    the child.

    communicate() returns a tuple (stdout, stderr).

    Note: The data read is buffered in memory, so do not use this
    method if the data size is large or unlimited.

The following attributes are also available:

stdin
    If the stdin argument is PIPE, this attribute is a file object
    that provides input to the child process.  Otherwise, it is None.

stdout
    If the stdout argument is PIPE, this attribute is a file object
    that provides output from the child process.  Otherwise, it is
    None.

stderr
    If the stderr argument is PIPE, this attribute is file object that
    provides error output from the child process.  Otherwise, it is
    None.

pid
    The process ID of the child process.

returncode
    The child return code.  A None value indicates that the process
    hasn't terminated yet.  A negative value -N indicates that the
    child was terminated by signal N (UNIX only).


Replacing older functions with the subprocess module
====================================================
In this section, \"a ==> b\" means that b can be used as a replacement
for a.

Note: All functions in this section fail (more or less) silently if
the executed program cannot be found; this module raises an OSError
exception.

In the following examples, we assume that the subprocess module is
imported with \"from subprocess import *\".


Replacing /bin/sh shell backquote
---------------------------------
output=`mycmd myarg`
==>
output = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]


Replacing shell pipe line
-------------------------
output=`dmesg | grep hda`
==>
p1 = Popen([\"dmesg\"], stdout=PIPE)
p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]


Replacing os.system()
---------------------
sts = os.system(\"mycmd\" + \" myarg\")
==>
p = Popen(\"mycmd\" + \" myarg\", shell=True)
pid, sts = os.waitpid(p.pid, 0)

Note:

* Calling the program through the shell is usually not required.

* It's easier to look at the returncode attribute than the
  exitstatus.

A more real-world example would look like this:

try:
    retcode = call(\"mycmd\" + \" myarg\", shell=True)
    if retcode < 0:
        print >>sys.stderr, \"Child was terminated by signal\", -retcode
    else:
        print >>sys.stderr, \"Child returned\", retcode
except OSError, e:
    print >>sys.stderr, \"Execution failed:\", e


Replacing os.spawn*
-------------------
P_NOWAIT example:

pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid


P_WAIT example:

retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
retcode = call([\"/bin/mycmd\", \"myarg\"])


Vector example:

os.spawnvp(os.P_NOWAIT, path, args)
==>
Popen([path] + args[1:])


Environment example:

os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)
==>
Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})


Replacing os.popen*
-------------------
pipe = os.popen(\"cmd\", mode='r', bufsize)
==>
pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdout=PIPE).stdout

pipe = os.popen(\"cmd\", mode='w', bufsize)
==>
pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdin=PIPE).stdin


(child_stdin, child_stdout) = os.popen2(\"cmd\", mode, bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdin, child_stdout) = (p.stdin, p.stdout)


(child_stdin,
 child_stdout,
 child_stderr) = os.popen3(\"cmd\", mode, bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
(child_stdin,
 child_stdout,
 child_stderr) = (p.stdin, p.stdout, p.stderr)


(child_stdin, child_stdout_and_stderr) = os.popen4(\"cmd\", mode,
                                                   bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)

On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as
the command to execute, in which case arguments will be passed
directly to the program without shell intervention.  This usage can be
replaced as follows:

(child_stdin, child_stdout) = os.popen2([\"/bin/ls\", \"-l\"], mode,
                                        bufsize)
==>
p = Popen([\"/bin/ls\", \"-l\"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)
(child_stdin, child_stdout) = (p.stdin, p.stdout)

Return code handling translates as follows:

pipe = os.popen(\"cmd\", 'w')
...
rc = pipe.close()
if rc is not None and rc % 256:
    print \"There were some errors\"
==>
process = Popen(\"cmd\", 'w', shell=True, stdin=PIPE)
...
process.stdin.close()
if process.wait() != 0:
    print \"There were some errors\"


Replacing popen2.*
------------------
(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode)
==>
p = Popen([\"somestring\"], shell=True, bufsize=bufsize
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

On Unix, popen2 also accepts a sequence as the command to execute, in
which case arguments will be passed directly to the program without
shell intervention.  This usage can be replaced as follows:

(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize,
                                            mode)
==>
p = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

The popen2.Popen3 and popen2.Popen4 basically works as subprocess.Popen,
except that:

* subprocess.Popen raises an exception if the execution fails
* the capturestderr argument is replaced with the stderr argument.
* stdin=PIPE and stdout=PIPE must be specified.
* popen2 closes all filedescriptors by default, but you have to specify
  close_fds=True with subprocess.Popen.
\"\"\"" code nil nil [299 12736])
            ("sys" include nil nil [12738 12748])
            ("mswindows" variable nil nil [12749 12786])
            ("os" include nil nil [12788 12797])
            ("types" include nil nil [12798 12810])
            ("traceback" include nil nil [12811 12827])
            ("gc" include nil nil [12828 12837])
            ("signal" include nil nil [12838 12851])
            ("errno" include nil nil [12852 12864])
            ("CalledProcessError" type
               (:documentation "This exception is raised when a process run by check_call() or
    check_output() returns a non-zero exit status.
    The exit status will be stored in the returncode attribute;
    check_output() will also store the output in the output attribute.
    "
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [13270 13298])
                            ("self" variable nil (reparse-symbol indented_block_body) [13307 13321])
                            ("self" variable nil (reparse-symbol indented_block_body) [13330 13350]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13225 13229])
                            ("returncode" variable nil (reparse-symbol function_parameters) [13231 13241])
                            ("cmd" variable nil (reparse-symbol function_parameters) [13243 13246])
                            ("output" variable nil (reparse-symbol function_parameters) [13248 13254]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [13212 13351])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13367 13371]))                          )
                        (reparse-symbol indented_block_body) [13355 13467]))                  
                :type "class")
                nil [12907 13467])
            ("if" code nil nil [13469 14057])
            ("__all__" variable nil nil [14059 14167])
            ("if" code nil nil [14169 14705])
            ("try" code nil nil [14705 14772])
            ("_active" variable nil nil [14773 14785])
            ("_cleanup" function nil nil [14787 15172])
            ("PIPE" code nil nil [15173 15182])
            ("STDOUT" code nil nil [15183 15194])
            ("_eintr_retry_call" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [15219 15223])
                ("args" variable nil (reparse-symbol function_parameters) [15225 15230]))              ) nil [15197 15564])
            ("_args_from_interpreter_flags" function (:documentation "Return a list of command-line arguments reproducing the current
    settings in sys.flags and sys.warnoptions.") nil [15576 16381])
            ("call" function
               (:documentation "Run command with arguments.  Wait for command to complete, then
    return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [16392 16402])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16404 16412]))                  )
                nil [16383 16683])
            ("check_call" function
               (:documentation "Run command with arguments.  Wait for command to complete.  If
    the exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    check_call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [16700 16710])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [16712 16720]))                  )
                nil [16685 17278])
            ("check_output" function (:arguments 
              ( ("popenargs" variable nil (reparse-symbol function_parameters) [17297 17307])
                ("kwargs" variable nil (reparse-symbol function_parameters) [17309 17317]))              ) nil [17280 18523])
            ("list2cmdline" function
               (:documentation "
    Translate a sequence of arguments into a command line
    string, using the same rules as the MS C runtime:

    1) Arguments are delimited by white space, which is either a
       space or a tab.

    2) A string surrounded by double quotation marks is
       interpreted as a single argument, regardless of white space
       contained within.  A quoted string can be embedded in an
       argument.

    3) A double quotation mark preceded by a backslash is
       interpreted as a literal double quotation mark.

    4) Backslashes are interpreted literally, unless they
       immediately precede a double quotation mark.

    5) If backslashes immediately precede a double quotation mark,
       every pair of backslashes is interpreted as a literal
       backslash.  If the number of backslashes is odd, the last
       backslash escapes the next double quotation mark as
       described in rule 3.
    "
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [18542 18545]))                  )
                nil [18525 59887]))          
      :file "subprocess.py"
      :pointmax 59887
      :fsize 59886
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax '((INDENT_BLOCK 20146 . 59887) (NEWLINE 20107 . 20108) (COLON 20106 . 20107) (ELIF 20093 . 20097) (INDENT_BLOCK 20048 . 20081) (IF 19979 . 19981) (NAME 20015 . 20016) (NAME 20017 . 20021) (IF 20022 . 20024) (NAME 20028 . 20032) (NAME 20033 . 20035) (NAME 20036 . 20042) (NAME 20043 . 20046) (NEWLINE 20047 . 20048) (INDENT_BLOCK 15333 . 15564) (NEWLINE 15332 . 15333) (COLON 15331 . 15332) (TRY 15257 . 15260) (AS 15327 . 15329)))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2612])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_tb(tb, limit))'."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2627 2629])
                    ("limit" variable nil (reparse-symbol function_parameters) [2631 2636]))                  )
                nil [2613 2756])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2772 2774])
                    ("limit" variable nil (reparse-symbol function_parameters) [2776 2781]))                  )
                nil [2757 3892])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3914 3919])
                    ("value" variable nil (reparse-symbol function_parameters) [3921 3926])
                    ("tb" variable nil (reparse-symbol function_parameters) [3928 3930])
                    ("limit" variable nil (reparse-symbol function_parameters) [3932 3937])
                    ("file" variable nil (reparse-symbol function_parameters) [3944 3948]))                  )
                nil [3894 4725])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4747 4752])
                    ("value" variable nil (reparse-symbol function_parameters) [4754 4759])
                    ("tb" variable nil (reparse-symbol function_parameters) [4761 4763])
                    ("limit" variable nil (reparse-symbol function_parameters) [4765 4770]))                  )
                nil [4726 5377])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5404 5409])
                    ("value" variable nil (reparse-symbol function_parameters) [5411 5416]))                  )
                nil [5378 7519])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7547 7552])
                    ("value" variable nil (reparse-symbol function_parameters) [7554 7559]))                  )
                nil [7520 7816])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7831 7836]))              ) nil [7817 8101])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8117 8122])
                    ("file" variable nil (reparse-symbol function_parameters) [8129 8133]))                  )
                nil [8103 8542])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8559 8564]))                  )
                nil [8544 8784])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8801 8806])
                    ("file" variable nil (reparse-symbol function_parameters) [8813 8817]))                  )
                nil [8786 9181])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9199 9200])
                    ("limit" variable nil (reparse-symbol function_parameters) [9207 9212])
                    ("file" variable nil (reparse-symbol function_parameters) [9219 9223]))                  )
                nil [9183 9686])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9704 9705])
                    ("limit" variable nil (reparse-symbol function_parameters) [9712 9717]))                  )
                nil [9687 9988])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [10007 10008])
                    ("limit" variable nil (reparse-symbol function_parameters) [10015 10020]))                  )
                nil [9989 11149])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11164 11166]))                  )
                nil [11150 11286]))          
      :file "traceback.py"
      :pointmax 11286
      :fsize 11285
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 942])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [959 967]))                  )
                nil [944 1635])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1653 1661])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1663 1677]))                  )
                nil [1637 4028]))          
      :file "linecache.py"
      :pointmax 4028
      :fsize 4027
      :lastmodtime '(22509 6028 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib64!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
